import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/models/api_models.dart';
import 'package:ckcandr/providers/chuong_provider.dart';
import 'package:ckcandr/core/widgets/loading_overlay.dart';

class ChuongMucScreen extends ConsumerStatefulWidget {
  const ChuongMucScreen({super.key});

  @override
  ConsumerState<ChuongMucScreen> createState() => _ChuongMucScreenState();
}

class _ChuongMucScreenState extends ConsumerState<ChuongMucScreen> {
  int? _selectedSubjectId;
  bool _hasAutoSelected = false;

  @override
  Widget build(BuildContext context) {
    final assignedSubjects = ref.watch(assignedSubjectsProvider);

    // Force rebuild when selectedSubjectId changes
    final chapters = _selectedSubjectId != null
        ? ref.watch(chaptersProvider(_selectedSubjectId))
        : const AsyncValue<List<ChuongDTO>>.data([]);

    // üî• RESET AUTO-SELECT: Reset khi user thay ƒë·ªïi (logout/login)
    ref.listen(assignedSubjectsProvider, (previous, next) {
      if (previous != next) {
        _hasAutoSelected = false;
        _selectedSubjectId = null;
      }
    });

    // Debug logging for UI state
    if (_selectedSubjectId != null) {
      chapters.whenData((data) {
        print('üéØ UI rebuild: Subject $_selectedSubjectId has ${data.length} chapters');
      });
    }

    return PageTransitionWrapper(
      child: Scaffold(
      body: Column(
        children: [
          // Subject selection
          Container(
            padding: const EdgeInsets.all(16.0),
            child: assignedSubjects.when(
              data: (subjects) {
                // üî• AUTO-SELECT: T·ª± ƒë·ªông ch·ªçn m√¥n h·ªçc ƒë·∫ßu ti√™n n·∫øu ch∆∞a ch·ªçn
                if (!_hasAutoSelected && subjects.isNotEmpty && _selectedSubjectId == null) {
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    setState(() {
                      _selectedSubjectId = subjects.first.mamonhoc;
                      _hasAutoSelected = true;
                    });
                    // Force load chapters for auto-selected subject
                    ref.invalidate(chaptersProvider(subjects.first.mamonhoc));
                  });
                }

                return DropdownButtonFormField<int>(
                  value: _selectedSubjectId,
                  decoration: const InputDecoration(
                    labelText: 'Ch·ªçn m√¥n h·ªçc',
                    border: OutlineInputBorder(),
                    helperText: 'Ch·ªâ hi·ªÉn th·ªã m√¥n h·ªçc b·∫°n ƒë∆∞·ª£c ph√¢n c√¥ng',
                  ),
                  items: subjects.map((subject) {
                    return DropdownMenuItem<int>(
                      value: subject.mamonhoc,
                      child: Text('${subject.mamonhoc} - ${subject.tenmonhoc}'),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      _selectedSubjectId = value;
                    });

                    // üî• FORCE REFRESH: Lu√¥n invalidate provider khi thay ƒë·ªïi m√¥n h·ªçc
                    if (value != null) {
                      print('üîÑ Subject changed to $value, invalidating provider');
                      ref.invalidate(chaptersProvider(value));
                    }
                  },
                );
              },
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, _) => Text('L·ªói t·∫£i m√¥n h·ªçc: $error'),
            ),
          ),

          // Chapters list
          Expanded(
            child: _selectedSubjectId == null
                ? const Center(
                    child: Text(
                      'Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ xem danh s√°ch ch∆∞∆°ng',
                      style: TextStyle(fontSize: 16, color: Colors.grey),
                    ),
                  )
                : chapters.when(
                    data: (chaptersList) => chaptersList.isEmpty
                        ? Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.book_outlined,
                                  size: 64,
                                  color: Colors.grey[400],
                                ),
                                const SizedBox(height: 16),
                                Text(
                                  'Ch∆∞a c√≥ ch∆∞∆°ng n√†o',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.grey[600],
                                  ),
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  'M√¥n h·ªçc n√†y ch∆∞a c√≥ ch∆∞∆°ng n√†o.\nH√£y th√™m ch∆∞∆°ng ƒë·∫ßu ti√™n!',
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.grey[500],
                                  ),
                                ),
                                const SizedBox(height: 24),
                                ElevatedButton.icon(
                                  onPressed: () => _addChapter(),
                                  icon: const Icon(Icons.add),
                                  label: const Text('Th√™m ch∆∞∆°ng ƒë·∫ßu ti√™n'),
                                  style: ElevatedButton.styleFrom(
                                    padding: const EdgeInsets.symmetric(
                                      horizontal: 24,
                                      vertical: 12,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          )
                        : RefreshIndicator(
                            onRefresh: () async {
                              ref.invalidate(chaptersProvider(_selectedSubjectId));
                            },
                            child: ListView.builder(
                              itemCount: chaptersList.length,
                              itemBuilder: (context, index) {
                                final chapter = chaptersList[index];
                                return Card(
                                  margin: const EdgeInsets.symmetric(
                                    horizontal: 16.0,
                                    vertical: 4.0,
                                  ),
                                  child: ListTile(
                                    leading: CircleAvatar(
                                      backgroundColor: Theme.of(context).primaryColor,
                                      child: Text(
                                        '${index + 1}',
                                        style: const TextStyle(color: Colors.white),
                                      ),
                                    ),
                                    title: Text(
                                      chapter.tenchuong,
                                      style: const TextStyle(fontWeight: FontWeight.bold),
                                    ),
                                    subtitle: Text(
                                      'Tr·∫°ng th√°i: ${chapter.trangthai == true ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng ho·∫°t ƒë·ªông"}',
                                    ),
                                    trailing: Row(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        // Lu√¥n hi·ªÉn th·ªã n√∫t s·ª≠a
                                        IconButton(
                                          icon: const Icon(Icons.edit, color: Colors.blue),
                                          onPressed: () => _editChapter(chapter),
                                          tooltip: 'Ch·ªânh s·ª≠a',
                                        ),
                                        // Ch·ªâ hi·ªÉn th·ªã n√∫t x√≥a khi status = false (0)
                                        if (chapter.trangthai == false)
                                          IconButton(
                                            icon: const Icon(Icons.delete, color: Colors.red),
                                            onPressed: () => _deleteChapter(chapter),
                                            tooltip: 'X√≥a',
                                          )
                                        else
                                          // Hi·ªÉn th·ªã n√∫t ·∫©n/hi·ªán thay v√¨ x√≥a
                                          IconButton(
                                            icon: Icon(
                                              chapter.trangthai == true ? Icons.visibility_off : Icons.visibility,
                                              color: chapter.trangthai == true ? Colors.orange : Colors.green,
                                            ),
                                            onPressed: () => _toggleChapterStatus(chapter),
                                            tooltip: chapter.trangthai == true ? '·∫®n ch∆∞∆°ng' : 'Hi·ªán ch∆∞∆°ng',
                                          ),
                                      ],
                                    ),
                                  ),
                                );
                              },
                            ),
                          ),
                    loading: () => const Center(child: CircularProgressIndicator()),
                    error: (error, _) => Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text('L·ªói t·∫£i danh s√°ch ch∆∞∆°ng: $error'),
                          const SizedBox(height: 16),
                          ElevatedButton(
                            onPressed: () {
                              ref.invalidate(chaptersProvider(_selectedSubjectId));
                            },
                            child: const Text('Th·ª≠ l·∫°i'),
                          ),
                        ],
                      ),
                    ),
                  ),
          ),
        ],
      ),
      floatingActionButton: _selectedSubjectId != null
          ? FloatingActionButton(
              onPressed: () => _addChapter(),
              tooltip: 'Th√™m ch∆∞∆°ng m·ªõi',
              child: const Icon(Icons.add),
            )
          : null,
      ),
    );
  }

  void _addChapter() {
    if (_selectedSubjectId == null) return;

    showDialog(
      context: context,
      builder: (context) => ChuongFormDialog(
        subjectId: _selectedSubjectId!,
      ),
    );
  }

  void _editChapter(ChuongDTO chapter) {
    showDialog(
      context: context,
      builder: (context) => ChuongFormDialog(
        subjectId: chapter.mamonhoc,
        chapter: chapter,
      ),
    );
  }

  void _toggleChapterStatus(ChuongDTO chapter) {
    final newStatus = !(chapter.trangthai ?? true);
    final action = newStatus ? 'hi·ªán' : '·∫©n';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('X√°c nh·∫≠n ${action} ch∆∞∆°ng'),
        content: Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${action} ch∆∞∆°ng "${chapter.tenchuong}"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                // Update chapter status
                final request = UpdateChuongRequestDTO(
                  tenchuong: chapter.tenchuong,
                  mamonhoc: chapter.mamonhoc,
                  trangthai: newStatus,
                );

                await ref
                    .read(chaptersProvider(_selectedSubjectId).notifier)
                    .updateChapter(chapter.machuong, request);

                if (mounted) {
                  _showSuccessDialog('${newStatus ? "Hi·ªán" : "·∫®n"} ch∆∞∆°ng th√†nh c√¥ng!');
                }
              } catch (e) {
                if (mounted) {
                  _showErrorDialog('L·ªói ${action} ch∆∞∆°ng: $e');
                }
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: newStatus ? Colors.green : Colors.orange,
            ),
            child: Text(
              newStatus ? 'Hi·ªán' : '·∫®n',
              style: const TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  void _deleteChapter(ChuongDTO chapter) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n x√≥a'),
        content: Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn ch∆∞∆°ng "${chapter.tenchuong}"?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                await ref
                    .read(chaptersProvider(_selectedSubjectId).notifier)
                    .deleteChapter(chapter.machuong);
                if (mounted) {
                  _showSuccessDialog('X√≥a ch∆∞∆°ng th√†nh c√¥ng!');
                }
              } catch (e) {
                if (mounted) {
                  _showErrorDialog('L·ªói x√≥a ch∆∞∆°ng: $e');
                }
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('X√≥a vƒ©nh vi·ªÖn', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _showSuccessDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green),
            SizedBox(width: 8),
            Text('Th√†nh c√¥ng'),
          ],
        ),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.error, color: Colors.red),
            SizedBox(width: 8),
            Text('L·ªói'),
          ],
        ),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}

// Dialog widget for creating/editing chapters
class ChuongFormDialog extends ConsumerStatefulWidget {
  final int subjectId;
  final ChuongDTO? chapter;

  const ChuongFormDialog({
    super.key,
    required this.subjectId,
    this.chapter,
  });

  @override
  ConsumerState<ChuongFormDialog> createState() => _ChuongFormDialogState();
}

class _ChuongFormDialogState extends ConsumerState<ChuongFormDialog> {
  final _formKey = GlobalKey<FormState>();
  final _tenChuongController = TextEditingController();
  bool _trangThai = true;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    if (widget.chapter != null) {
      _tenChuongController.text = widget.chapter!.tenchuong;
      _trangThai = widget.chapter!.trangthai ?? true;
    }
  }

  @override
  void dispose() {
    _tenChuongController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.chapter == null ? 'Th√™m ch∆∞∆°ng m·ªõi' : 'Ch·ªânh s·ª≠a ch∆∞∆°ng'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              controller: _tenChuongController,
              decoration: const InputDecoration(
                labelText: 'T√™n ch∆∞∆°ng *',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Vui l√≤ng nh·∫≠p t√™n ch∆∞∆°ng';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            // Ch·ªâ hi·ªÉn th·ªã tr·∫°ng th√°i, kh√¥ng cho ph√©p thay ƒë·ªïi tr·ª±c ti·∫øp
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey[300]!),
              ),
              child: Row(
                children: [
                  Icon(
                    _trangThai ? Icons.visibility : Icons.visibility_off,
                    color: _trangThai ? Colors.green : Colors.orange,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Tr·∫°ng th√°i: ${_trangThai ? "Hi·ªÉn th·ªã" : "·∫®n"}',
                    style: const TextStyle(fontWeight: FontWeight.w500),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'L∆∞u √Ω: Tr·∫°ng th√°i ch∆∞∆°ng ch·ªâ c√≥ th·ªÉ thay ƒë·ªïi b·∫±ng n√∫t ·∫®n/Hi·ªán sau khi t·∫°o',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('H·ªßy'),
        ),
        ElevatedButton(
          onPressed: _isLoading ? null : _submitForm,
          child: _isLoading
              ? const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : Text(widget.chapter == null ? 'Th√™m' : 'C·∫≠p nh·∫≠t'),
        ),
      ],
    );
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      if (widget.chapter == null) {
        // Create new chapter - m·∫∑c ƒë·ªãnh status = true
        final request = CreateChuongRequestDTO(
          tenchuong: _tenChuongController.text.trim(),
          mamonhoc: widget.subjectId,
          trangthai: true, // Lu√¥n t·∫°o v·ªõi status = true
        );

        await ref
            .read(chaptersProvider(widget.subjectId).notifier)
            .addChapter(request);

        if (mounted) {
          Navigator.pop(context);
          _showSuccessDialog('Th√™m ch∆∞∆°ng th√†nh c√¥ng!');
        }
      } else {
        // Update existing chapter - ch·ªâ c·∫≠p nh·∫≠t t√™n, gi·ªØ nguy√™n status
        final request = UpdateChuongRequestDTO(
          tenchuong: _tenChuongController.text.trim(),
          mamonhoc: widget.subjectId,
          trangthai: widget.chapter!.trangthai ?? true, // Gi·ªØ nguy√™n status c≈©
        );

        await ref
            .read(chaptersProvider(widget.subjectId).notifier)
            .updateChapter(widget.chapter!.machuong, request);

        if (mounted) {
          Navigator.pop(context);
          _showSuccessDialog('C·∫≠p nh·∫≠t ch∆∞∆°ng th√†nh c√¥ng!');
        }
      }
    } catch (e) {
      if (mounted) {
        _showErrorDialog('L·ªói: $e');
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _showSuccessDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green),
            SizedBox(width: 8),
            Text('Th√†nh c√¥ng'),
          ],
        ),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.error, color: Colors.red),
            SizedBox(width: 8),
            Text('L·ªói'),
          ],
        ),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }
}