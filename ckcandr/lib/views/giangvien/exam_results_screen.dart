import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:ckcandr/providers/user_provider.dart';
import 'package:ckcandr/providers/exam_results_provider.dart';
import 'package:ckcandr/core/theme/role_theme.dart';
import 'package:ckcandr/models/user_model.dart';
import 'package:ckcandr/models/exam_taking_model.dart';
import 'package:ckcandr/models/de_thi_model.dart'; // Import for TimezoneHelper
import 'package:ckcandr/core/widgets/error_dialog.dart';
import 'package:ckcandr/core/utils/responsive_helper.dart';
import 'package:ckcandr/services/ket_qua_service.dart';
import 'package:ckcandr/services/auto_refresh_service.dart';
import 'package:ckcandr/views/giangvien/widgets/exam_status_toggle.dart';

/// Exam Results Screen - M√†n h√¨nh xem k·∫øt qu·∫£ thi cho gi√°o vi√™n
/// Hi·ªÉn th·ªã danh s√°ch sinh vi√™n ƒë√£ thi, ƒëi·ªÉm s·ªë v√† chi ti·∫øt ƒë√°p √°n
class ExamResultsScreen extends ConsumerStatefulWidget {
  final int examId;
  final String? examName;

  const ExamResultsScreen({
    super.key,
    required this.examId,
    this.examName,
  });

  @override
  ConsumerState<ExamResultsScreen> createState() => _ExamResultsScreenState();
}

class _ExamResultsScreenState extends ConsumerState<ExamResultsScreen> with AutoRefreshMixin {
  String _sortBy = 'score';
  bool _sortAscending = false;
  String _searchQuery = '';
  final TextEditingController _searchController = TextEditingController();
  final KetQuaService _ketQuaService = KetQuaService();

  // AutoRefreshMixin implementation
  @override
  String get autoRefreshKey => 'exam_results_${widget.examId}';

  @override
  void onAutoRefresh() {
    final examStatus = ref.read(examResultsProvider).currentExamStatus;

    // Ch·ªâ auto-refresh trong khi thi ho·∫∑c tr∆∞·ªõc khi thi
    if (examStatus == ExamMonitoringStatus.duringExam ||
        examStatus == ExamMonitoringStatus.beforeExam) {
      debugPrint('üîÑ Auto-refreshing exam results during exam period');
      _loadResults();
    } else {
      debugPrint('‚è∏Ô∏è Skipping auto-refresh: exam ended');
    }
  }

  @override
  bool get shouldAutoRefresh => true;

  @override
  int get refreshIntervalSeconds => 30;

  @override
  void initState() {
    super.initState();
    _loadResults();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  /// load k·∫øt qu·∫£ thi
  void _loadResults() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(examResultsProvider.notifier).loadExamResults(widget.examId);
    });
  }

  @override
  Widget build(BuildContext context) {
    final currentUser = ref.watch(currentUserProvider);
    final role = currentUser?.quyen ?? UserRole.giangVien;
    final resultsState = ref.watch(examResultsProvider);
    final stats = ref.watch(examResultsStatsProvider);
    final theme = Theme.of(context);
    final isSmallScreen = ResponsiveHelper.isMobile(context);

    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: _buildAppBar(role, theme),
      body: Column(
        children: [
          // th·ªëng k√™ t·ªïng quan
          _buildStatsCard(theme, stats, isSmallScreen),
          
          // thanh t√¨m ki·∫øm v√† l·ªçc
          _buildSearchAndFilter(theme, resultsState, isSmallScreen),
          
          // danh s√°ch k·∫øt qu·∫£
          Expanded(
            child: _buildResultsList(theme, resultsState, isSmallScreen),
          ),
        ],
      ),
      floatingActionButton: _buildFloatingActionButton(role),
    );
  }

  /// x√¢y d·ª±ng app bar
  PreferredSizeWidget _buildAppBar(UserRole role, ThemeData theme) {
    return AppBar(
      backgroundColor: RoleTheme.getPrimaryColor(role),
      foregroundColor: Colors.white,
      title: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'K·∫øt qu·∫£ thi',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
          if (widget.examName != null)
            Text(
              widget.examName!,
              style: const TextStyle(
                fontSize: 14,
                color: Colors.white70,
              ),
            ),
        ],
      ),
      actions: [
        // Exam Status Toggle - hi·ªÉn th·ªã lu√¥n ƒë·ªÉ gi√°o vi√™n c√≥ th·ªÉ ƒë√≥ng/m·ªü ƒë·ªÅ thi b·∫•t c·ª© l√∫c n√†o
        Consumer(
          builder: (context, ref, child) {
            final state = ref.watch(examResultsProvider);
            final examInfo = state.examInfo;

            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8),
              child: ExamStatusToggle(
                examId: widget.examId,
                initialStatus: examInfo?.trangthai ?? true,
                isCompact: true,
                showLabel: true,
                onStatusChanged: () {
                  // Refresh results when status changes
                  _loadResults();
                },
              ),
            );
          },
        ),
        // N√∫t xem chi ti·∫øt - ch·ªâ hi·ªÉn th·ªã khi ƒëang thi
        Consumer(
          builder: (context, ref, child) {
            final state = ref.watch(examResultsProvider);
            final examStatus = state.currentExamStatus;

            // Ch·ªâ hi·ªÉn th·ªã khi ƒëang trong th·ªùi gian thi
            if (examStatus != ExamMonitoringStatus.duringExam) {
              return const SizedBox.shrink();
            }

            return IconButton(
              onPressed: () => _showExamDetailDialog(),
              icon: const Icon(Icons.info_outline),
              tooltip: 'Xem chi ti·∫øt',
            );
          },
        ),
        IconButton(
          onPressed: () => _showExportDialog(),
          icon: const Icon(Icons.download),
          tooltip: 'Xu·∫•t file',
        ),
        IconButton(
          onPressed: () => _loadResults(),
          icon: const Icon(Icons.refresh),
          tooltip: 'L√†m m·ªõi',
        ),
      ],
    );
  }

  /// x√¢y d·ª±ng card th·ªëng k√™
  Widget _buildStatsCard(ThemeData theme, Map<String, dynamic> stats, bool isSmallScreen) {
    final examStatus = ref.watch(examResultsProvider).currentExamStatus;

    return Container(
      margin: EdgeInsets.all(isSmallScreen ? 12 : 16),
      padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withValues(alpha: 0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Exam Status Indicator
          Row(
            children: [
              Text(
                'Th·ªëng k√™ t·ªïng quan',
                style: theme.textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              _buildExamStatusIndicator(examStatus),
            ],
          ),
          const SizedBox(height: 12),
          
          if (isSmallScreen) ...[
            // layout d·ªçc cho mobile
            _buildStatItem('T·ªïng s·ªë sinh vi√™n', '${stats['totalStudents'] ?? 0}', Icons.people),
            const SizedBox(height: 8),
            _buildStatItem(
              examStatus == ExamMonitoringStatus.duringExam ? 'ƒê√£ n·ªôp' : 'ƒê√£ thi',
              '${stats['submittedCount'] ?? 0}',
              Icons.check_circle,
              Colors.green
            ),
            const SizedBox(height: 8),
            if (examStatus == ExamMonitoringStatus.duringExam) ...[
              _buildStatItem('ƒêang l√†m b√†i', '${stats['inProgressCount'] ?? 0}', Icons.edit, Colors.orange),
              const SizedBox(height: 8),
              _buildStatItem('Ch∆∞a v√†o thi', '${stats['notStartedCount'] ?? 0}', Icons.schedule, Colors.blue),
            ] else ...[
              _buildStatItem('ƒêi·ªÉm trung b√¨nh', stats['totalStudents'] == 0 ? 'N/A' : '${(stats['averageScore'] ?? 0).toStringAsFixed(1)}/10', Icons.grade),
              const SizedBox(height: 8),
              _buildStatItem('T·ª∑ l·ªá ƒë·∫≠u', stats['totalStudents'] == 0 ? 'N/A' : '${(stats['passRate'] ?? 0).toStringAsFixed(1)}%', Icons.check_circle),
            ],
          ] else ...[
            // layout ngang cho desktop/tablet
            Row(
              children: [
                Expanded(child: _buildStatItem('T·ªïng s·ªë sinh vi√™n', '${stats['totalStudents'] ?? 0}', Icons.people)),
                Expanded(child: _buildStatItem(
                  examStatus == ExamMonitoringStatus.duringExam ? 'ƒê√£ n·ªôp' : 'ƒê√£ thi',
                  '${stats['submittedCount'] ?? 0}',
                  Icons.check_circle,
                  Colors.green
                )),
                if (examStatus == ExamMonitoringStatus.duringExam) ...[
                  Expanded(child: _buildStatItem('ƒêang l√†m b√†i', '${stats['inProgressCount'] ?? 0}', Icons.edit, Colors.orange)),
                  Expanded(child: _buildStatItem('Ch∆∞a v√†o thi', '${stats['notStartedCount'] ?? 0}', Icons.schedule, Colors.blue)),
                ] else ...[
                  Expanded(child: _buildStatItem('ƒêi·ªÉm trung b√¨nh', stats['totalStudents'] == 0 ? 'N/A' : '${(stats['averageScore'] ?? 0).toStringAsFixed(1)}/10', Icons.grade)),
                ],
              ],
            ),
            if (examStatus != ExamMonitoringStatus.duringExam) ...[
              const SizedBox(height: 12),
              Row(
                children: [
                  Expanded(child: _buildStatItem('ƒêi·ªÉm cao nh·∫•t', stats['totalStudents'] == 0 ? 'N/A' : '${stats['highestScore'] ?? 0}/10', Icons.trending_up, Colors.green)),
                  Expanded(child: _buildStatItem('ƒêi·ªÉm th·∫•p nh·∫•t', stats['totalStudents'] == 0 ? 'N/A' : '${stats['lowestScore'] ?? 0}/10', Icons.trending_down, Colors.red)),
                  Expanded(child: _buildStatItem('S·ªë ng∆∞·ªùi ƒë·∫≠u', '${stats['passedCount'] ?? 0}', Icons.check, Colors.green)),
                ],
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  Expanded(child: _buildStatItem('Vi ph·∫°m (>0)', '${stats['violationCount'] ?? 0}', Icons.warning, Colors.orange)),
                  Expanded(child: _buildStatItem('T·ªïng vi ph·∫°m', '${stats['totalViolations'] ?? 0}', Icons.error, Colors.red)),
                  const Expanded(child: SizedBox()), // Empty space
                ],
              ),
            ],
          ],
        ],
      ),
    );
  }

  /// x√¢y d·ª±ng item th·ªëng k√™
  Widget _buildStatItem(String label, String value, IconData icon, [Color? color]) {
    return Row(
      children: [
        Icon(
          icon,
          size: 20,
          color: color ?? Colors.blue,
        ),
        const SizedBox(width: 8),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
              Text(
                value,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: color ?? Colors.black87,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  /// x√¢y d·ª±ng thanh t√¨m ki·∫øm v√† l·ªçc
  Widget _buildSearchAndFilter(ThemeData theme, ExamResultsState resultsState, bool isSmallScreen) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: isSmallScreen ? 12 : 16),
      padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withValues(alpha: 0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          // filter theo l·ªõp h·ªçc
          if (resultsState.classes.isNotEmpty) ...[
            Row(
              children: [
                const Text('L·ªõp h·ªçc:'),
                const SizedBox(width: 12),
                Expanded(
                  child: DropdownButton<int?>(
                    value: resultsState.selectedClassId,
                    isExpanded: true,
                    items: [
                      const DropdownMenuItem(value: null, child: Text('T·∫•t c·∫£ l·ªõp')),
                      ...resultsState.classes.map((lop) => DropdownMenuItem(
                        value: lop.classId,
                        child: Text(lop.className),
                      )),
                    ],
                    onChanged: (value) {
                      ref.read(examResultsProvider.notifier).selectClass(value);
                    },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
          ],

          // thanh t√¨m ki·∫øm
          TextField(
            controller: _searchController,
            decoration: InputDecoration(
              hintText: 'T√¨m ki·∫øm theo t√™n sinh vi√™n ho·∫∑c MSSV...',
              prefixIcon: const Icon(Icons.search),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: BorderSide(color: Colors.grey[300]!),
              ),
              contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            ),
            onChanged: (value) {
              setState(() {
                _searchQuery = value;
              });
            },
          ),

          const SizedBox(height: 12),

          // s·∫Øp x·∫øp
          Row(
            children: [
              const Text('S·∫Øp x·∫øp theo:'),
              const SizedBox(width: 12),
              Expanded(
                child: DropdownButton<String>(
                  value: _sortBy,
                  isExpanded: true,
                  items: const [
                    DropdownMenuItem(value: 'score', child: Text('ƒêi·ªÉm s·ªë')),
                    DropdownMenuItem(value: 'name', child: Text('T√™n sinh vi√™n')),
                    DropdownMenuItem(value: 'studentId', child: Text('MSSV')),
                    DropdownMenuItem(value: 'status', child: Text('Tr·∫°ng th√°i')),
                  ],
                  onChanged: (value) {
                    if (value != null) {
                      setState(() {
                        _sortBy = value;
                      });
                      _applySorting();
                    }
                  },
                ),
              ),
              const SizedBox(width: 12),
              IconButton(
                onPressed: () {
                  setState(() {
                    _sortAscending = !_sortAscending;
                  });
                  _applySorting();
                },
                icon: Icon(
                  _sortAscending ? Icons.arrow_upward : Icons.arrow_downward,
                ),
                tooltip: _sortAscending ? 'TƒÉng d·∫ßn' : 'Gi·∫£m d·∫ßn',
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// √°p d·ª•ng s·∫Øp x·∫øp
  void _applySorting() {
    ref.read(examResultsProvider.notifier).sortStudents(_sortBy, _sortAscending);
  }

  /// x√¢y d·ª±ng danh s√°ch k·∫øt qu·∫£
  Widget _buildResultsList(ThemeData theme, ExamResultsState state, bool isSmallScreen) {
    if (state.isLoading) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('ƒêang t·∫£i k·∫øt qu·∫£...'),
          ],
        ),
      );
    }

    if (state.error != null) {
      // Ki·ªÉm tra n·∫øu l·ªói l√† do kh√¥ng c√≥ d·ªØ li·ªáu
      final isNoDataError = state.error!.toLowerCase().contains('not found') ||
                           state.error!.toLowerCase().contains('404') ||
                           state.error!.toLowerCase().contains('kh√¥ng t√¨m th·∫•y');

      if (isNoDataError) {
        return Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.search_off,
                size: 80,
                color: Colors.orange[400],
              ),
              const SizedBox(height: 20),
              Text(
                'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu',
                style: theme.textTheme.headlineSmall?.copyWith(
                  color: Colors.orange[600],
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'ƒê·ªÅ thi n√†y c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c g√°n cho l·ªõp n√†o\nho·∫∑c ch∆∞a c√≥ sinh vi√™n l√†m b√†i',
                style: theme.textTheme.bodyLarge?.copyWith(
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              ElevatedButton.icon(
                onPressed: () => _loadResults(),
                icon: const Icon(Icons.refresh),
                label: const Text('Th·ª≠ l·∫°i'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        );
      }

      // L·ªói th·ª±c s·ª± t·ª´ API
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 80,
              color: Colors.red[400],
            ),
            const SizedBox(height: 20),
            Text(
              'C√≥ l·ªói x·∫£y ra',
              style: theme.textTheme.headlineSmall?.copyWith(
                color: Colors.red[600],
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(16),
              margin: const EdgeInsets.symmetric(horizontal: 32),
              decoration: BoxDecoration(
                color: Colors.red.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red.withValues(alpha: 0.3)),
              ),
              child: Text(
                state.error!,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: Colors.red[700],
                ),
                textAlign: TextAlign.center,
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: () => _loadResults(),
              icon: const Icon(Icons.refresh),
              label: const Text('Th·ª≠ l·∫°i'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      );
    }

    if (state.students.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.people_outline,
              size: 80,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 20),
            Text(
              'L·ªõp r·ªóng',
              style: theme.textTheme.headlineSmall?.copyWith(
                color: Colors.grey[600],
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Kh√¥ng c√≥ sinh vi√™n n√†o trong l·ªõp n√†y\nho·∫∑c ch∆∞a c√≥ ai l√†m b√†i thi',
              style: theme.textTheme.bodyLarge?.copyWith(
                color: Colors.grey[500],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.blue.withValues(alpha: 0.3)),
              ),
              child: Column(
                children: [
                  Icon(
                    Icons.info_outline,
                    color: Colors.blue[600],
                    size: 24,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'C√≥ th·ªÉ do:',
                    style: TextStyle(
                      color: Colors.blue[700],
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    '‚Ä¢ L·ªõp ch∆∞a ƒë∆∞·ª£c g√°n sinh vi√™n\n'
                    '‚Ä¢ ƒê·ªÅ thi ch∆∞a ƒë∆∞·ª£c g√°n cho l·ªõp\n'
                    '‚Ä¢ Sinh vi√™n ch∆∞a l√†m b√†i thi',
                    style: TextStyle(
                      color: Colors.blue[600],
                      fontSize: 13,
                    ),
                    textAlign: TextAlign.left,
                  ),
                ],
              ),
            ),
          ],
        ),
      );
    }

    // l·ªçc sinh vi√™n theo t√¨m ki·∫øm
    final filteredStudents = state.students.where((student) {
      if (_searchQuery.isEmpty) return true;
      final query = _searchQuery.toLowerCase();
      return student.fullName.toLowerCase().contains(query) ||
             student.studentId.toLowerCase().contains(query);
    }).toList();

    return ListView.builder(
      padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
      itemCount: filteredStudents.length,
      itemBuilder: (context, index) {
        final student = filteredStudents[index];
        return _buildStudentCard(theme, student, index + 1, isSmallScreen);
      },
    );
  }

  /// x√¢y d·ª±ng card k·∫øt qu·∫£ c·ªßa t·ª´ng sinh vi√™n
  Widget _buildStudentCard(ThemeData theme, StudentResult student, int rank, bool isSmallScreen) {
    final scoreColor = _getScoreColor(student.displayScore);

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          // Click v√†o ph·∫ßn th√¥ng tin sinh vi√™n ƒë·ªÉ xem b√†i l√†m (ch·ªâ n·∫øu appropriate)
          Expanded(
            child: InkWell(
              onTap: _shouldShowScore(student) && student.hasSubmitted ? () => _showStudentSubmission(student) : null,
              borderRadius: BorderRadius.circular(12),
              child: Padding(
                padding: EdgeInsets.all(isSmallScreen ? 12 : 16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // header v·ªõi rank v√† th√¥ng tin sinh vi√™n
                    Row(
                      children: [
                        // rank badge
                        Container(
                          width: 32,
                          height: 32,
                          decoration: BoxDecoration(
                            color: _getRankColor(rank),
                            shape: BoxShape.circle,
                          ),
                          child: Center(
                            child: Text(
                              '$rank',
                              style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),

                        // th√¥ng tin sinh vi√™n
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                student.fullName,
                                style: theme.textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              Text(
                                'MSSV: ${student.studentId}',
                                style: theme.textTheme.bodySmall?.copyWith(
                                  color: Colors.grey[600],
                                ),
                              ),
                              if (student.startTime != null)
                                Text(
                                  'Th·ªùi gian: ${_formatDateTime(student.startTime!)}',
                                  style: theme.textTheme.bodySmall?.copyWith(
                                    color: Colors.grey[600],
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ],
                    ),

                    const SizedBox(height: 12),

                    // tr·∫°ng th√°i v√† th·ªëng k√™
                    Row(
                      children: [
                        // tr·∫°ng th√°i
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: _getStatusColor(_getDisplayStatus(student)).withValues(alpha: 0.1),
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(color: _getStatusColor(_getDisplayStatus(student)).withValues(alpha: 0.3)),
                          ),
                          child: Text(
                            _getDisplayStatus(student),
                            style: TextStyle(
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                              color: _getStatusColor(_getDisplayStatus(student)),
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),

                        // th·ªùi gian l√†m b√†i (n·∫øu c√≥)
                        if (student.durationInMinutes != null)
                          _buildDetailItem(
                            Icons.access_time,
                            '${student.durationInMinutes} ph√∫t',
                            Colors.blue,
                          ),

                        const Spacer(),

                        // s·ªë l·∫ßn chuy·ªÉn tab (n·∫øu c√≥)
                        if ((student.tabSwitchCount ?? 0) > 0)
                          _buildDetailItem(
                            Icons.warning,
                            '${student.tabSwitchCount ?? 0} l·∫ßn tho√°t',
                            Colors.orange,
                          ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Click v√†o ƒëi·ªÉm ƒë·ªÉ ch·ªânh s·ª≠a (ch·ªâ hi·ªÉn th·ªã khi appropriate)
          Container(
            constraints: const BoxConstraints(minWidth: 80, maxWidth: 100),
            child: InkWell(
              onTap: _shouldShowScore(student) ? () => _showScoreEditDialog(student) : null,
              borderRadius: BorderRadius.circular(12),
              child: Container(
                padding: const EdgeInsets.all(16),
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  decoration: BoxDecoration(
                    color: scoreColor.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(color: scoreColor.withValues(alpha: 0.3)),
                  ),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        _shouldShowScore(student)
                          ? student.displayScore.toStringAsFixed(1)
                          : '---',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: _shouldShowScore(student) ? scoreColor : Colors.grey,
                        ),
                      ),
                      Text(
                        _shouldShowScore(student) ? '/10' : '',
                        style: TextStyle(
                          fontSize: 12,
                          color: _shouldShowScore(student)
                            ? scoreColor.withValues(alpha: 0.7)
                            : Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// x√¢y d·ª±ng item chi ti·∫øt
  Widget _buildDetailItem(IconData icon, String text, Color color) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(icon, size: 16, color: color),
        const SizedBox(width: 4),
        Text(
          text,
          style: TextStyle(
            fontSize: 12,
            color: color,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }

  /// x√¢y d·ª±ng floating action button
  Widget? _buildFloatingActionButton(UserRole role) {
    return FloatingActionButton(
      onPressed: () => _showExportDialog(),
      backgroundColor: RoleTheme.getPrimaryColor(role),
      child: const Icon(Icons.download, color: Colors.white),
    );
  }

  /// hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£
  void _showResultDetail(ExamResult result) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        child: Container(
          width: ResponsiveHelper.isMobile(context) ? null : 600,
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // header
              Row(
                children: [
                  Icon(
                    Icons.person,
                    color: RoleTheme.getPrimaryColor(UserRole.giangVien),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Chi ti·∫øt k·∫øt qu·∫£ - ${result.studentId}',
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.close),
                  ),
                ],
              ),

              const SizedBox(height: 16),

              // th√¥ng tin t·ªïng quan
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[50],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    _buildInfoRow('ƒêi·ªÉm s·ªë:', '${result.score}/10'),
                    _buildInfoRow('S·ªë c√¢u ƒë√∫ng:', '${result.correctAnswers}/${result.totalQuestions}'),
                    _buildInfoRow('Th·ªùi gian l√†m b√†i:', _formatDuration(result.duration)),
                    _buildInfoRow('Th·ªùi gian b·∫Øt ƒë·∫ßu:', _formatDateTime(result.startTime)),
                    _buildInfoRow('Th·ªùi gian n·ªôp b√†i:', _formatDateTime(result.completedTime)),
                    _buildInfoRow('ƒê√°nh gi√°:', result.grade),
                  ],
                ),
              ),

              const SizedBox(height: 16),

              // n√∫t xem chi ti·∫øt ƒë√°p √°n
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: () {
                    Navigator.of(context).pop();
                    _showDetailedAnswers(result);
                  },
                  icon: const Icon(Icons.list_alt),
                  label: const Text('Xem chi ti·∫øt ƒë√°p √°n'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: RoleTheme.getPrimaryColor(UserRole.giangVien),
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// l·∫•y m√†u theo ƒëi·ªÉm s·ªë
  Color _getScoreColor(double score) {
    if (score >= 9) return Colors.green;
    if (score >= 8) return Colors.lightGreen;
    if (score >= 7) return Colors.orange;
    if (score >= 5) return Colors.amber;
    return Colors.red;
  }

  /// l·∫•y m√†u theo rank
  Color _getRankColor(int rank) {
    switch (rank) {
      case 1:
        return Colors.amber; // v√†ng
      case 2:
        return Colors.grey; // b·∫°c
      case 3:
        return Colors.brown; // ƒë·ªìng
      default:
        return Colors.blue;
    }
  }

  /// format th·ªùi gian (hi·ªÉn th·ªã theo GMT+7)
  String _formatDateTime(DateTime dateTime) {
    // Convert to GMT+7 for display if the dateTime is in UTC
    final localTime = TimezoneHelper.toLocal(dateTime);
    return '${DateFormat('dd/MM/yyyy HH:mm').format(localTime)} (GMT+7)';
  }

  /// format duration
  String _formatDuration(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes % 60;
    final seconds = duration.inSeconds % 60;

    if (hours > 0) {
      return '${hours}h ${minutes}m ${seconds}s';
    } else if (minutes > 0) {
      return '${minutes}m ${seconds}s';
    } else {
      return '${seconds}s';
    }
  }

  /// x√¢y d·ª±ng row th√¥ng tin
  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                color: Colors.grey,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// hi·ªÉn th·ªã chi ti·∫øt ƒë√°p √°n
  void _showDetailedAnswers(ExamResult result) {
    // load chi ti·∫øt t·ª´ API
    ref.read(examResultsProvider.notifier).loadResultDetail(result.resultId);

    // navigate to detailed answers screen
    context.push('/giangvien/exam-result-detail/${result.resultId}');
  }

  /// L·∫•y display status d·ª±a tr√™n exam monitoring status
  String _getDisplayStatus(StudentResult student) {
    final examStatus = ref.read(examResultsProvider).currentExamStatus;
    return student.getDisplayStatus(examStatus);
  }

  /// Ki·ªÉm tra c√≥ n√™n hi·ªÉn th·ªã ƒëi·ªÉm s·ªë kh√¥ng
  bool _shouldShowScore(StudentResult student) {
    final examStatus = ref.read(examResultsProvider).currentExamStatus;
    return student.shouldShowScore(examStatus);
  }

  /// X√¢y d·ª±ng exam status indicator
  Widget _buildExamStatusIndicator(ExamMonitoringStatus status) {
    String statusText;
    Color statusColor;
    IconData statusIcon;

    switch (status) {
      case ExamMonitoringStatus.beforeExam:
        statusText = 'Ch∆∞a b·∫Øt ƒë·∫ßu';
        statusColor = Colors.blue;
        statusIcon = Icons.schedule;
        break;
      case ExamMonitoringStatus.duringExam:
        statusText = 'ƒêang di·ªÖn ra';
        statusColor = Colors.green;
        statusIcon = Icons.play_circle;
        break;
      case ExamMonitoringStatus.afterExam:
        statusText = 'ƒê√£ k·∫øt th√∫c';
        statusColor = Colors.red;
        statusIcon = Icons.stop_circle;
        break;
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: statusColor.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: statusColor),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(statusIcon, color: statusColor, size: 16),
          const SizedBox(width: 6),
          Text(
            statusText,
            style: TextStyle(
              color: statusColor,
              fontWeight: FontWeight.w600,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }

  /// l·∫•y m√†u s·∫Øc theo tr·∫°ng th√°i
  Color _getStatusColor(String status) {
    switch (status) {
      case 'ƒê√£ n·ªôp':
        return Colors.green;
      case 'ƒêang l√†m b√†i':
        return Colors.orange;
      case 'Ch∆∞a v√†o thi':
        return Colors.blue;
      case 'Ch∆∞a b·∫Øt ƒë·∫ßu':
        return Colors.grey;
      case 'Ch∆∞a n·ªôp':
        return Colors.orange;
      case 'V·∫Øng thi':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  /// hi·ªÉn th·ªã dialog ch·ªânh s·ª≠a ƒëi·ªÉm
  void _showScoreEditDialog(StudentResult student) {
    final TextEditingController scoreController = TextEditingController(
      text: student.displayScore.toStringAsFixed(1),
    );
    final formKey = GlobalKey<FormState>(debugLabel: 'score_edit_${student.studentId}');

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Ch·ªânh s·ª≠a ƒëi·ªÉm'),
        content: Form(
          key: formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Th√¥ng tin sinh vi√™n
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      student.fullName,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    Text('MSSV: ${student.studentId}'),
                    Text('Tr·∫°ng th√°i: ${student.status}'),
                    if (student.hasSubmitted && student.startTime != null)
                      Text('Th·ªùi gian thi: ${_formatDateTime(student.startTime!)}'),
                  ],
                ),
              ),
              const SizedBox(height: 16),

              // Input ƒëi·ªÉm s·ªë
              TextFormField(
                controller: scoreController,
                keyboardType: const TextInputType.numberWithOptions(decimal: true),
                decoration: const InputDecoration(
                  labelText: 'ƒêi·ªÉm s·ªë',
                  hintText: 'Nh·∫≠p ƒëi·ªÉm t·ª´ 0 ƒë·∫øn 10',
                  border: OutlineInputBorder(),
                  suffixText: '/10',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Vui l√≤ng nh·∫≠p ƒëi·ªÉm';
                  }
                  final score = double.tryParse(value);
                  if (score == null) {
                    return 'ƒêi·ªÉm ph·∫£i l√† s·ªë';
                  }
                  if (score < 0 || score > 10) {
                    return 'ƒêi·ªÉm ph·∫£i t·ª´ 0 ƒë·∫øn 10';
                  }
                  return null;
                },
                onChanged: (value) {
                  // Validate real-time
                  formKey.currentState?.validate();
                },
              ),

              const SizedBox(height: 12),

              // Ghi ch√∫
              if (!student.hasSubmitted)
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange[50],
                    borderRadius: BorderRadius.circular(6),
                    border: Border.all(color: Colors.orange[200]!),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.info, color: Colors.orange[700], size: 16),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Sinh vi√™n ch∆∞a thi. ƒêi·ªÉm s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n th·ªß c√¥ng.',
                          style: TextStyle(
                            color: Colors.orange[700],
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (formKey.currentState?.validate() ?? false) {
                final newScore = double.parse(scoreController.text);
                Navigator.pop(context);
                await _updateStudentScore(student, newScore);
              }
            },
            child: const Text('L∆∞u ƒëi·ªÉm'),
          ),
        ],
      ),
    );
  }

  /// c·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë sinh vi√™n
  Future<void> _updateStudentScore(StudentResult student, double newScore) async {
    try {
      // G·ªçi API c·∫≠p nh·∫≠t ƒëi·ªÉm
      final result = await _ketQuaService.updateScore(
        examId: widget.examId,
        studentId: student.studentId,
        newScore: newScore,
      );

      if (mounted) {
        if (result['success']) {
          await SuccessDialog.show(
            context,
            message: result['message'] ?? 'C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng',
          );

          // Refresh data after successful update
          await ref.read(examResultsProvider.notifier).refresh(widget.examId);
        } else {
          await ErrorDialog.show(
            context,
            message: result['message'] ?? 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒëi·ªÉm',
          );
        }
      }

    } catch (e) {
      if (mounted) {
        await ErrorDialog.show(
          context,
          message: 'L·ªói c·∫≠p nh·∫≠t ƒëi·ªÉm: ${e.toString()}',
        );
      }
    }
  }

  /// hi·ªÉn th·ªã b√†i l√†m c·ªßa sinh vi√™n
  void _showStudentSubmission(StudentResult student) {
    if (!student.hasSubmitted) {
      ErrorDialog.show(
        context,
        title: 'Ch∆∞a n·ªôp b√†i',
        message: '${student.fullName} ch∆∞a n·ªôp b√†i thi',
      );
      return;
    }

    debugPrint('‚úÖ Student has submitted, calling _findAndNavigateToStudentResult');
    // T√¨m ketQuaId t·ª´ student data
    // V√¨ StudentResult kh√¥ng c√≥ ketQuaId, ta c·∫ßn t√¨m c√°ch kh√°c
    // C√≥ th·ªÉ s·ª≠ d·ª•ng API ƒë·ªÉ t√¨m ketQuaId d·ª±a tr√™n examId v√† studentId
    _findAndNavigateToStudentResult(student);
  }

  /// t√¨m ketQuaId v√† ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh xem b√†i l√†m
  Future<void> _findAndNavigateToStudentResult(StudentResult student) async {
    debugPrint('üîç _findAndNavigateToStudentResult called for student: ${student.fullName} (${student.studentId})');
    debugPrint('üîç ExamId: ${widget.examId}');

    try {
      debugPrint('üåê Calling findKetQuaId API...');
      // G·ªçi API t√¨m ketQuaId
      final result = await _ketQuaService.findKetQuaId(
        examId: widget.examId,
        studentId: student.studentId,
      );

      debugPrint('üì• findKetQuaId API result: $result');

      if (mounted) {
        if (result['success']) {
          final ketQuaId = result['ketQuaId'];
          debugPrint('‚úÖ API success! ketQuaId: $ketQuaId');
          if (ketQuaId != null) {
            final route = '/giangvien/student-result-detail/${widget.examId}/${Uri.encodeComponent(student.studentId)}?studentName=${Uri.encodeComponent(student.fullName)}&examName=${Uri.encodeComponent(widget.examName ?? 'ƒê·ªÅ thi')}';
            debugPrint('üöÄ NEW CODE: Navigating to teacher detail screen: $route');
            // Navigate to teacher student result detail screen
            context.push(route);
          } else {
            debugPrint('‚ùå ketQuaId is null');
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('‚ùå Kh√¥ng t√¨m th·∫•y ketQuaId cho ${student.fullName}'),
                backgroundColor: Colors.red,
                duration: const Duration(seconds: 3),
              ),
            );
          }
        } else {
          debugPrint('‚ùå API failed: ${result['message']}');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚ùå ${result['message']}'),
              backgroundColor: Colors.orange,
              duration: const Duration(seconds: 4),
            ),
          );
        }
      }

    } catch (e) {
      debugPrint('üí• Exception in _findAndNavigateToStudentResult: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói khi t·∫£i b√†i l√†m c·ªßa ${student.fullName}: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }



  /// hi·ªÉn th·ªã dialog export
  void _showExportDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Xu·∫•t b·∫£ng ƒëi·ªÉm'),
        content: const Text('Ch·ªçn ƒë·ªãnh d·∫°ng file ƒë·ªÉ xu·∫•t:'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _exportResults('csv');
            },
            child: const Text('CSV (Excel)'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _exportResults('detailed');
            },
            child: const Text('Chi ti·∫øt (TXT)'),
          ),
        ],
      ),
    );
  }

  /// export k·∫øt qu·∫£
  Future<void> _exportResults(String format) async {
    try {
      // L·∫•y t√™n ƒë·ªÅ thi t·ª´ state
      final examTitle = ref.read(examResultsProvider).testResults?.deThiInfo.examName ?? 'De_Thi_${widget.examId}';

      final success = await ref.read(examResultsProvider.notifier).exportResults(
        widget.examId,
        format,
        examTitle,
      );

      if (mounted) {
        if (success) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Xu·∫•t file th√†nh c√¥ng! File ƒë√£ ƒë∆∞·ª£c l∆∞u v√† chia s·∫ª.'),
              backgroundColor: Colors.green,
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('L·ªói khi xu·∫•t file. Vui l√≤ng th·ª≠ l·∫°i.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói khi xu·∫•t file: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  /// hi·ªÉn th·ªã dialog chi ti·∫øt ƒë·ªÅ thi trong th·ªùi gian thi
  void _showExamDetailDialog() {
    final state = ref.read(examResultsProvider);
    final testResults = state.testResults;
    final stats = ref.read(examResultsStatsProvider);

    if (testResults == null) return;

    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          width: MediaQuery.of(context).size.width * 0.9,
          constraints: const BoxConstraints(maxHeight: 600),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Header
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.orange,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(12),
                    topRight: Radius.circular(12),
                  ),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.warning, color: Colors.white),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Chi ti·∫øt ƒë·ªÅ thi ƒëang di·ªÖn ra',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    IconButton(
                      onPressed: () => Navigator.of(context).pop(),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),

              // Content
              Flexible(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Exam info
                      Text(
                        testResults.deThiInfo.examName,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Warning message
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.orange.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.orange),
                        ),
                        child: Row(
                          children: [
                            const Icon(Icons.warning, color: Colors.orange),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                'ƒê·ªÅ thi ƒëang di·ªÖn ra. Sinh vi√™n v√†o mu·ªôn s·∫Ω b·ªã c·∫£nh b√°o.',
                                style: TextStyle(
                                  color: Colors.orange[800],
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Statistics
                      Text(
                        'Th·ªëng k√™ hi·ªán t·∫°i',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),

                      _buildStatRow('T·ªïng sinh vi√™n:', '${stats['totalStudents']}'),
                      _buildStatRow('ƒê√£ n·ªôp b√†i:', '${stats['submittedCount']}'),
                      _buildStatRow('ƒêang l√†m b√†i:', '${stats['inProgressCount']}'),
                      _buildStatRow('Ch∆∞a v√†o thi:', '${stats['notStartedCount']}'),

                      const SizedBox(height: 16),

                      // Disable button
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: () => _showDisableExamConfirmation(),
                          icon: const Icon(Icons.block),
                          label: const Text('ƒê√≥ng ƒë·ªÅ thi'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.red,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 12),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label),
          Text(
            value,
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }

  /// hi·ªÉn th·ªã x√°c nh·∫≠n ƒë√≥ng ƒë·ªÅ thi
  void _showDisableExamConfirmation() {
    Navigator.of(context).pop(); // ƒê√≥ng dialog chi ti·∫øt tr∆∞·ªõc

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n ƒë√≥ng ƒë·ªÅ thi'),
        content: const Text(
          'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√≥ng ƒë·ªÅ thi n√†y?\n\n'
          'Sinh vi√™n s·∫Ω kh√¥ng th·ªÉ v√†o thi n·ªØa v√† nh·ªØng ai ƒëang l√†m b√†i s·∫Ω b·ªã gi√°n ƒëo·∫°n.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.of(context).pop();
              // TODO: Implement disable exam API call
              await SuccessDialog.show(
                context,
                message: 'ƒê√£ ƒë√≥ng ƒë·ªÅ thi th√†nh c√¥ng',
              );
              _loadResults(); // Refresh data
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('ƒê√≥ng ƒë·ªÅ thi'),
          ),
        ],
      ),
    );
  }


}
