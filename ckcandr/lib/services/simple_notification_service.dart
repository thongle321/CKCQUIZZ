import 'dart:async';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// Simple notification service ch·ªâ d√πng local data
class SimpleNotificationService {
  static final SimpleNotificationService _instance = SimpleNotificationService._internal();
  factory SimpleNotificationService() => _instance;
  SimpleNotificationService._internal();

  Timer? _examReminderTimer;
  final List<LocalNotification> _notifications = [];

  /// Kh·ªüi t·∫°o service
  Future<void> initialize() async {
    await _loadNotifications();
    _startExamReminder();
  }

  /// L·∫•y danh s√°ch th√¥ng b√°o
  List<LocalNotification> getNotifications() {
    return List.from(_notifications);
  }

  /// Th√™m th√¥ng b√°o m·ªõi
  Future<void> addNotification(LocalNotification notification) async {
    _notifications.insert(0, notification);
    await _saveNotifications();
  }

  /// ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  Future<void> markAsRead(int notificationId) async {
    final index = _notifications.indexWhere((n) => n.id == notificationId);
    if (index != -1) {
      _notifications[index] = _notifications[index].copyWith(isRead: true);
      await _saveNotifications();
    }
  }

  /// X√≥a th√¥ng b√°o
  Future<void> removeNotification(int notificationId) async {
    _notifications.removeWhere((n) => n.id == notificationId);
    await _saveNotifications();
  }

  /// L·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
  int getUnreadCount() {
    return _notifications.where((n) => !n.isRead).length;
  }

  /// T·∫°o th√¥ng b√°o t·ª± ƒë·ªông khi ƒë·∫øn gi·ªù thi
  void _startExamReminder() {
    _examReminderTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
      _checkExamReminders();
    });
  }

  /// Ki·ªÉm tra v√† t·∫°o th√¥ng b√°o nh·∫Øc nh·ªü thi
  void _checkExamReminders() {
    final now = DateTime.now();
    
    // Gi·∫£ l·∫≠p ƒë·ªÅ thi s·∫Øp di·ªÖn ra (trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ API)
    final upcomingExam = DateTime(2025, 6, 27, 1, 0); // 01:00 ng√†y 27/6/2025
    final timeUntilExam = upcomingExam.difference(now);
    
    // Th√¥ng b√°o 30 ph√∫t tr∆∞·ªõc
    if (timeUntilExam.inMinutes <= 30 && timeUntilExam.inMinutes > 25) {
      _createExamReminder('30 ph√∫t', 'kt');
    }
    // Th√¥ng b√°o 10 ph√∫t tr∆∞·ªõc
    else if (timeUntilExam.inMinutes <= 10 && timeUntilExam.inMinutes > 5) {
      _createExamReminder('10 ph√∫t', 'kt');
    }
    // Th√¥ng b√°o 5 ph√∫t tr∆∞·ªõc
    else if (timeUntilExam.inMinutes <= 5 && timeUntilExam.inMinutes > 0) {
      _createExamReminder('5 ph√∫t', 'kt');
    }
    // Th√¥ng b√°o khi ƒë·∫øn gi·ªù
    else if (timeUntilExam.inMinutes <= 0 && timeUntilExam.inMinutes > -5) {
      _createExamStartNotification('kt');
    }
  }

  /// T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü
  void _createExamReminder(String timeRemaining, String examName) {
    final notification = LocalNotification(
      id: DateTime.now().millisecondsSinceEpoch,
      title: '‚è∞ S·∫Øp ƒë·∫øn gi·ªù thi',
      content: 'ƒê·ªÅ thi "$examName" s·∫Ω b·∫Øt ƒë·∫ßu trong $timeRemaining. H√£y chu·∫©n b·ªã s·∫µn s√†ng!',
      type: NotificationType.examReminder,
      time: DateTime.now(),
      teacherName: 'H·ªá th·ªëng',
      isRead: false,
    );
    
    addNotification(notification);
  }

  /// T·∫°o th√¥ng b√°o khi ƒë·∫øn gi·ªù thi
  void _createExamStartNotification(String examName) {
    final notification = LocalNotification(
      id: DateTime.now().millisecondsSinceEpoch,
      title: 'üö® ƒê√£ ƒë·∫øn gi·ªù thi!',
      content: 'ƒê·ªÅ thi "$examName" ƒë√£ b·∫Øt ƒë·∫ßu. Nh·∫•n ƒë·ªÉ v√†o thi ngay!',
      type: NotificationType.examReminder,
      time: DateTime.now(),
      teacherName: 'H·ªá th·ªëng',
      isRead: false,
    );
    
    addNotification(notification);
  }

  /// Load th√¥ng b√°o t·ª´ SharedPreferences
  Future<void> _loadNotifications() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final notificationsJson = prefs.getStringList('notifications') ?? [];
      
      _notifications.clear();
      for (final json in notificationsJson) {
        // Trong th·ª±c t·∫ø s·∫Ω parse JSON, ·ªü ƒë√¢y d√πng mock data
      }
      
      // Th√™m mock data n·∫øu ch∆∞a c√≥
      if (_notifications.isEmpty) {
        _addMockNotifications();
      }
    } catch (e) {
      debugPrint('Error loading notifications: $e');
      _addMockNotifications();
    }
  }

  /// L∆∞u th√¥ng b√°o v√†o SharedPreferences
  Future<void> _saveNotifications() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final notificationsJson = _notifications.map((n) => n.toString()).toList();
      await prefs.setStringList('notifications', notificationsJson);
    } catch (e) {
      debugPrint('Error saving notifications: $e');
    }
  }

  /// Th√™m mock data
  void _addMockNotifications() {
    final mockNotifications = [
      LocalNotification(
        id: 1,
        title: 'üìù ƒê·ªÅ thi m·ªõi',
        content: 'Gi·∫£ng vi√™n ƒë√£ t·∫°o ƒë·ªÅ thi "Ki·ªÉm tra gi·ªØa k·ª≥ L·∫≠p tr√¨nh C++" cho l·ªõp L·ªõp C++',
        type: NotificationType.examNew,
        time: DateTime.now().subtract(const Duration(hours: 2)),
        teacherName: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        isRead: false,
      ),
      LocalNotification(
        id: 2,
        title: '‚è∞ Nh·∫Øc nh·ªü thi',
        content: 'ƒê·ªÅ thi "kt" s·∫Ω b·∫Øt ƒë·∫ßu v√†o l√∫c 01:00 ng√†y mai. H√£y chu·∫©n b·ªã s·∫µn s√†ng!',
        type: NotificationType.examReminder,
        time: DateTime.now().subtract(const Duration(hours: 5)),
        teacherName: 'H·ªá th·ªëng',
        isRead: false,
      ),
      LocalNotification(
        id: 3,
        title: '‚úèÔ∏è C·∫≠p nh·∫≠t ƒë·ªÅ thi',
        content: 'ƒê·ªÅ thi "kt" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th·ªùi gian. Vui l√≤ng ki·ªÉm tra l·∫°i.',
        type: NotificationType.examUpdate,
        time: DateTime.now().subtract(const Duration(days: 1)),
        teacherName: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        isRead: true,
      ),
      LocalNotification(
        id: 4,
        title: 'üéØ K·∫øt qu·∫£ thi',
        content: 'K·∫øt qu·∫£ ƒë·ªÅ thi "Ki·ªÉm tra cu·ªëi k·ª≥" ƒë√£ c√≥. ƒêi·ªÉm c·ªßa b·∫°n: 8.5/10',
        type: NotificationType.examResult,
        time: DateTime.now().subtract(const Duration(days: 2)),
        teacherName: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        isRead: true,
      ),
      LocalNotification(
        id: 5,
        title: 'üì¢ Th√¥ng b√°o l·ªõp h·ªçc',
        content: 'L·ªãch h·ªçc tu·∫ßn t·ªõi s·∫Ω thay ƒë·ªïi. Vui l√≤ng xem th√¥ng tin chi ti·∫øt trong l·ªõp h·ªçc.',
        type: NotificationType.classInfo,
        time: DateTime.now().subtract(const Duration(days: 3)),
        teacherName: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        isRead: true,
      ),
    ];
    
    _notifications.addAll(mockNotifications);
  }

  /// D·ªçn d·∫πp khi dispose
  void dispose() {
    _examReminderTimer?.cancel();
  }
}

/// Model cho th√¥ng b√°o local
class LocalNotification {
  final int id;
  final String title;
  final String content;
  final NotificationType type;
  final DateTime time;
  final String teacherName;
  final bool isRead;

  LocalNotification({
    required this.id,
    required this.title,
    required this.content,
    required this.type,
    required this.time,
    required this.teacherName,
    required this.isRead,
  });

  LocalNotification copyWith({
    int? id,
    String? title,
    String? content,
    NotificationType? type,
    DateTime? time,
    String? teacherName,
    bool? isRead,
  }) {
    return LocalNotification(
      id: id ?? this.id,
      title: title ?? this.title,
      content: content ?? this.content,
      type: type ?? this.type,
      time: time ?? this.time,
      teacherName: teacherName ?? this.teacherName,
      isRead: isRead ?? this.isRead,
    );
  }
}

/// Lo·∫°i th√¥ng b√°o
enum NotificationType {
  examNew,      // ƒê·ªÅ thi m·ªõi
  examReminder, // Nh·∫Øc nh·ªü thi
  examUpdate,   // C·∫≠p nh·∫≠t ƒë·ªÅ thi
  examResult,   // K·∫øt qu·∫£ thi
  classInfo,    // Th√¥ng b√°o l·ªõp h·ªçc
  system,       // Th√¥ng b√°o h·ªá th·ªëng
}
