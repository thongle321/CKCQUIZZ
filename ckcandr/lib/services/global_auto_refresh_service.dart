import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/providers/user_provider.dart';
import 'package:ckcandr/providers/lop_hoc_provider.dart';
import 'package:ckcandr/providers/de_thi_provider.dart';
import 'package:ckcandr/providers/student_notification_provider.dart';
import 'package:ckcandr/providers/mon_hoc_provider.dart';
import 'package:ckcandr/providers/nhom_hocphan_provider.dart';
import 'package:ckcandr/providers/de_kiem_tra_provider.dart';
import 'package:ckcandr/providers/api_user_provider.dart';
import 'package:ckcandr/providers/dashboard_provider.dart';

/// Service qu·∫£n l√Ω auto-refresh to√†n b·ªô app sau khi login
/// Refresh t·∫•t c·∫£ data m·ªói 30 gi√¢y
class GlobalAutoRefreshService {
  static final GlobalAutoRefreshService _instance = GlobalAutoRefreshService._internal();
  factory GlobalAutoRefreshService() => _instance;
  GlobalAutoRefreshService._internal();

  Timer? _globalRefreshTimer;
  WidgetRef? _ref;
  bool _isLoggedIn = false;

  /// Kh·ªüi t·∫°o service v·ªõi ref
  void initialize(WidgetRef ref) {
    if (_ref != null) {
      debugPrint('üåê GlobalAutoRefreshService already initialized, skipping...');
      return;
    }
    _ref = ref;
    debugPrint('üåê GlobalAutoRefreshService initialized');
  }

  /// B·∫Øt ƒë·∫ßu auto-refresh sau khi login th√†nh c√¥ng
  void startGlobalAutoRefresh() {
    if (_globalRefreshTimer != null) {
      _globalRefreshTimer!.cancel();
    }

    _isLoggedIn = true;
    debugPrint('üåê Starting global auto-refresh every 30 seconds');

    // Refresh ngay l·∫≠p t·ª©c
    _refreshAllData();

    // Sau ƒë√≥ refresh m·ªói 30 gi√¢y
    _globalRefreshTimer = Timer.periodic(const Duration(seconds: 30), (_) {
      if (_isLoggedIn && _ref != null) {
        _refreshAllData();
      }
    });
  }

  /// D·ª´ng auto-refresh khi logout
  void stopGlobalAutoRefresh() {
    _globalRefreshTimer?.cancel();
    _globalRefreshTimer = null;
    _isLoggedIn = false;
    _ref = null; // Reset ref ƒë·ªÉ tr√°nh l·ªói type cast
    debugPrint('üåê Global auto-refresh stopped');
  }

  /// Refresh t·∫•t c·∫£ data trong app
  void _refreshAllData() {
    if (_ref == null) return;

    try {
      debugPrint('üîÑ Global auto-refresh: Refreshing all data...');

      // Refresh user data
      _ref!.invalidate(currentUserProvider);
      _ref!.invalidate(apiUserProvider);

      // Refresh class data
      _ref!.invalidate(lopHocListProvider);

      // Refresh exam data
      _ref!.invalidate(deThiListProvider);

      // Refresh notification data
      _ref!.read(studentNotificationProvider.notifier).refresh();

      // Refresh subject data
      _ref!.invalidate(monHocListProvider);
      _ref!.invalidate(monHocProvider);

      // Refresh group data
      _ref!.invalidate(nhomHocPhanListProvider);

      // Refresh test data
      _ref!.invalidate(deKiemTraListProvider);

      // Refresh dashboard data
      refreshDashboard(_ref!);

      debugPrint('‚úÖ Global auto-refresh completed');
    } catch (e) {
      debugPrint('‚ùå Error during global auto-refresh: $e');
    }
  }

  /// Force refresh ngay l·∫≠p t·ª©c
  void forceRefresh() {
    if (_ref != null && _isLoggedIn) {
      _refreshAllData();
    }
  }

  /// Ki·ªÉm tra tr·∫°ng th√°i auto-refresh
  bool get isActive => _globalRefreshTimer != null && _globalRefreshTimer!.isActive;

  /// Dispose service
  void dispose() {
    stopGlobalAutoRefresh();
    _ref = null;
    debugPrint('üåê GlobalAutoRefreshService disposed');
  }
}

/// Provider cho GlobalAutoRefreshService
final globalAutoRefreshServiceProvider = Provider<GlobalAutoRefreshService>((ref) {
  final service = GlobalAutoRefreshService();
  // KH√îNG INITIALIZE REF ·ªû ƒê√ÇY V√å S·∫º G√ÇY L·ªñI TYPE CAST
  // service.initialize(ref as WidgetRef);

  // Auto dispose khi provider b·ªã h·ªßy
  ref.onDispose(() {
    service.dispose();
  });

  return service;
});

/// Provider ƒë·ªÉ theo d√µi tr·∫°ng th√°i auto-refresh
final globalAutoRefreshStateProvider = StateProvider<bool>((ref) => false);
