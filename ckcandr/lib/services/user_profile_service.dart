import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;
import 'package:ckcandr/core/config/api_config.dart';
import 'package:ckcandr/models/api_models.dart';
import 'package:ckcandr/providers/user_profile_provider.dart';
import 'package:ckcandr/services/api_service.dart';

/// Provider cho UserProfileService
final userProfileServiceProvider = Provider<UserProfileService>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  return UserProfileService(apiService);
});

/// Service ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng
class UserProfileService {
  final ApiService _apiService;

  UserProfileService(this._apiService);

  /// L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng hi·ªán t·∫°i
  Future<CurrentUserProfileDTO> getCurrentUserProfile() async {
    try {
      debugPrint('üîÑ UserProfileService - G·ªçi API l·∫•y th√¥ng tin user hi·ªán t·∫°i');

      // G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      final userProfile = await _apiService.getCurrentUserProfile();

      debugPrint('‚úÖ UserProfileService - Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin user: ${userProfile.fullname}');
      return userProfile;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi l·∫•y th√¥ng tin user: $e');
      rethrow;
    }
  }

  /// L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng theo ID (deprecated - s·ª≠ d·ª•ng getCurrentUserProfile thay th·∫ø)
  @Deprecated('Use getCurrentUserProfile() instead')
  Future<dynamic> getUserProfile(String userId) async {
    try {
      debugPrint('üîÑ UserProfileService - G·ªçi API l·∫•y th√¥ng tin user: $userId');

      // G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng chi ti·∫øt
      final userDetail = await _apiService.getUserById(userId);

      debugPrint('‚úÖ UserProfileService - Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin user: ${userDetail.hoten}');
      return userDetail;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi l·∫•y th√¥ng tin user: $e');
      rethrow;
    }
  }

  /// L·∫•y th·ªëng k√™ ng∆∞·ªùi d√πng theo role
  Future<UserStats> getUserStats(String userId, String role) async {
    try {
      debugPrint('üîÑ UserProfileService - G·ªçi API l·∫•y th·ªëng k√™ user: $userId, role: $role');
      
      switch (role.toLowerCase()) {
        case 'teacher':
          return await _getTeacherStats(userId);
        case 'student':
          return await _getStudentStats(userId);
        case 'admin':
          return await _getAdminStats(userId);
        default:
          return UserStats.empty();
      }
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi l·∫•y th·ªëng k√™ user: $e');
      return UserStats.empty();
    }
  }

  /// L·∫•y th·ªëng k√™ cho gi·∫£ng vi√™n
  Future<UserStats> _getTeacherStats(String teacherId) async {
    try {
      // L·∫•y danh s√°ch l·ªõp h·ªçc c·ªßa gi·∫£ng vi√™n
      final classes = await _apiService.getClasses(hienthi: true);
      
      // T√≠nh t·ªïng s·ªë sinh vi√™n trong c√°c l·ªõp
      int totalStudents = 0;
      for (final cls in classes) {
        totalStudents += cls.siso ?? 0;
      }
      
      // TODO: L·∫•y s·ªë b√†i ki·ªÉm tra khi API c√≥ s·∫µn
      const totalQuizzes = 0;
      
      debugPrint('üìä Teacher Stats - Classes: ${classes.length}, Students: $totalStudents');
      
      return UserStats.forTeacher(
        totalClasses: classes.length,
        totalStudents: totalStudents,
        totalQuizzes: totalQuizzes,
      );
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th·ªëng k√™ teacher: $e');
      return UserStats.empty();
    }
  }

  /// L·∫•y th·ªëng k√™ cho sinh vi√™n
  Future<UserStats> _getStudentStats(String studentId) async {
    try {
      // TODO: Implement khi c√≥ API cho sinh vi√™n
      // Hi·ªán t·∫°i tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
      debugPrint('üìä Student Stats - Placeholder data');
      
      return UserStats.forStudent(
        totalClasses: 0,
        totalQuizzes: 0,
        completedQuizzes: 0,
      );
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th·ªëng k√™ student: $e');
      return UserStats.empty();
    }
  }

  /// L·∫•y th·ªëng k√™ cho admin
  Future<UserStats> _getAdminStats(String adminId) async {
    try {
      // TODO: Implement khi c√≥ API cho admin
      // Hi·ªán t·∫°i tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
      debugPrint('üìä Admin Stats - Placeholder data');
      
      return UserStats.forAdmin(
        totalClasses: 0,
        totalStudents: 0,
        totalQuizzes: 0,
      );
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th·ªëng k√™ admin: $e');
      return UserStats.empty();
    }
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<bool> updateUserProfile(UpdateUserProfileDTO updateRequest) async {
    try {
      debugPrint('üîÑ UserProfileService - C·∫≠p nh·∫≠t th√¥ng tin user: ${updateRequest.fullname}');

      // G·ªçi API c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
      await _apiService.updateCurrentUserProfile(updateRequest);

      debugPrint('‚úÖ UserProfileService - C·∫≠p nh·∫≠t th√†nh c√¥ng');
      return true;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi c·∫≠p nh·∫≠t: $e');
      return false;
    }
  }

  /// ƒê·ªïi m·∫≠t kh·∫©u
  Future<bool> changePassword(String currentPassword, String newPassword, String confirmPassword) async {
    try {
      debugPrint('üîÑ UserProfileService - ƒê·ªïi m·∫≠t kh·∫©u START');
      debugPrint('   Current password length: ${currentPassword.length}');
      debugPrint('   New password length: ${newPassword.length}');
      debugPrint('   Confirm password length: ${confirmPassword.length}');
      debugPrint('   Passwords match: ${newPassword == confirmPassword}');

      // Validate inputs
      if (currentPassword.isEmpty) {
        debugPrint('‚ùå Current password is empty');
        throw Exception('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      if (newPassword.isEmpty) {
        debugPrint('‚ùå New password is empty');
        throw Exception('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      if (newPassword != confirmPassword) {
        debugPrint('‚ùå Passwords do not match');
        throw Exception('M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp');
      }

      if (newPassword.length < 6) {
        debugPrint('‚ùå New password too short');
        throw Exception('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      }

      // T·∫°o request ƒë·ªïi m·∫≠t kh·∫©u
      final changePasswordRequest = ChangePasswordDTO(
        currentPassword: currentPassword,
        newPassword: newPassword,
        confirmPassword: confirmPassword,
      );

      debugPrint('üì§ UserProfileService - Sending change password request');
      debugPrint('   Request: ${changePasswordRequest.toJson()}');

      // G·ªçi API ƒë·ªïi m·∫≠t kh·∫©u
      await _apiService.changePassword(changePasswordRequest);

      debugPrint('‚úÖ UserProfileService - ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng');
      return true;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: $e');
      debugPrint('   Error type: ${e.runtimeType}');
      if (e is Exception) {
        debugPrint('   Exception message: ${e.toString()}');
      }
      return false;
    }
  }

  /// Test network connectivity and authentication
  Future<bool> testNetworkAndAuth() async {
    try {
      debugPrint('üß™ Testing network connectivity and authentication...');

      // Test basic network connectivity
      final testUrl = Uri.parse('${ApiConfig.baseUrl}/api/Auth/validate-token');
      debugPrint('   Test URL: $testUrl');

      final response = await http.get(testUrl);
      debugPrint('   Network test status: ${response.statusCode}');
      debugPrint('   Network test body: ${response.body}');

      // Test current user endpoint
      final userResponse = await _apiService.getCurrentUserProfile();
      debugPrint('   Current user test: ${userResponse != null ? "SUCCESS" : "FAILED"}');

      return response.statusCode < 500; // Server reachable
    } catch (e) {
      debugPrint('‚ùå Network/Auth test failed: $e');
      return false;
    }
  }

  /// Upload avatar m·ªõi
  Future<String?> uploadAvatar(String imagePath) async {
    try {
      debugPrint('üîÑ UserProfileService - Upload avatar START');
      debugPrint('   Image path: $imagePath');

      // Validate image path
      if (imagePath.isEmpty) {
        debugPrint('‚ùå Image path is empty');
        throw Exception('ƒê∆∞·ªùng d·∫´n ·∫£nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }

      // Check if file exists
      final file = File(imagePath);
      final exists = await file.exists();
      debugPrint('   File exists: $exists');

      if (!exists) {
        debugPrint('‚ùå File does not exist at path: $imagePath');
        throw Exception('File kh√¥ng t·ªìn t·∫°i');
      }

      // Get file info
      final fileSize = await file.length();
      final fileName = file.path.split('/').last;
      debugPrint('   File name: $fileName');
      debugPrint('   File size: $fileSize bytes');

      debugPrint('üì§ UserProfileService - Calling API upload avatar');

      // G·ªçi API upload avatar
      final avatarUrl = await _apiService.uploadAvatar(imagePath);

      debugPrint('‚úÖ UserProfileService - Upload avatar th√†nh c√¥ng: $avatarUrl');
      return avatarUrl;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi upload avatar: $e');
      debugPrint('   Error type: ${e.runtimeType}');
      if (e is Exception) {
        debugPrint('   Exception message: ${e.toString()}');
      }
      return null;
    }
  }

  /// Debug method to test both upload avatar and change password
  Future<void> debugTestFunctions() async {
    debugPrint('üîß DEBUG TEST FUNCTIONS - START');

    // Test network and auth first
    final networkOk = await testNetworkAndAuth();
    debugPrint('üåê Network test result: $networkOk');

    if (!networkOk) {
      debugPrint('‚ùå Network test failed, stopping debug tests');
      return;
    }

    debugPrint('‚úÖ Network test passed, ready for function tests');
    debugPrint('üîß DEBUG TEST FUNCTIONS - END');
  }
}
