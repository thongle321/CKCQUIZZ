import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/models/api_models.dart';
import 'package:ckcandr/providers/user_profile_provider.dart';
import 'package:ckcandr/services/api_service.dart';

/// Provider cho UserProfileService
final userProfileServiceProvider = Provider<UserProfileService>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  return UserProfileService(apiService);
});

/// Service ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng
class UserProfileService {
  final ApiService _apiService;

  UserProfileService(this._apiService);

  /// L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng theo ID
  Future<dynamic> getUserProfile(String userId) async {
    try {
      debugPrint('üîÑ UserProfileService - G·ªçi API l·∫•y th√¥ng tin user: $userId');

      // G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng chi ti·∫øt
      final userDetail = await _apiService.getUserById(userId);

      debugPrint('‚úÖ UserProfileService - Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin user: ${userDetail.hoten}');
      return userDetail;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi l·∫•y th√¥ng tin user: $e');
      rethrow;
    }
  }

  /// L·∫•y th·ªëng k√™ ng∆∞·ªùi d√πng theo role
  Future<UserStats> getUserStats(String userId, String role) async {
    try {
      debugPrint('üîÑ UserProfileService - G·ªçi API l·∫•y th·ªëng k√™ user: $userId, role: $role');
      
      switch (role.toLowerCase()) {
        case 'teacher':
          return await _getTeacherStats(userId);
        case 'student':
          return await _getStudentStats(userId);
        case 'admin':
          return await _getAdminStats(userId);
        default:
          return UserStats.empty();
      }
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi l·∫•y th·ªëng k√™ user: $e');
      return UserStats.empty();
    }
  }

  /// L·∫•y th·ªëng k√™ cho gi·∫£ng vi√™n
  Future<UserStats> _getTeacherStats(String teacherId) async {
    try {
      // L·∫•y danh s√°ch l·ªõp h·ªçc c·ªßa gi·∫£ng vi√™n
      final classes = await _apiService.getClasses(hienthi: true);
      
      // T√≠nh t·ªïng s·ªë sinh vi√™n trong c√°c l·ªõp
      int totalStudents = 0;
      for (final cls in classes) {
        totalStudents += cls.siso ?? 0;
      }
      
      // TODO: L·∫•y s·ªë b√†i ki·ªÉm tra khi API c√≥ s·∫µn
      const totalQuizzes = 0;
      
      debugPrint('üìä Teacher Stats - Classes: ${classes.length}, Students: $totalStudents');
      
      return UserStats.forTeacher(
        totalClasses: classes.length,
        totalStudents: totalStudents,
        totalQuizzes: totalQuizzes,
      );
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th·ªëng k√™ teacher: $e');
      return UserStats.empty();
    }
  }

  /// L·∫•y th·ªëng k√™ cho sinh vi√™n
  Future<UserStats> _getStudentStats(String studentId) async {
    try {
      // TODO: Implement khi c√≥ API cho sinh vi√™n
      // Hi·ªán t·∫°i tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
      debugPrint('üìä Student Stats - Placeholder data');
      
      return UserStats.forStudent(
        totalClasses: 0,
        totalQuizzes: 0,
        completedQuizzes: 0,
      );
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th·ªëng k√™ student: $e');
      return UserStats.empty();
    }
  }

  /// L·∫•y th·ªëng k√™ cho admin
  Future<UserStats> _getAdminStats(String adminId) async {
    try {
      // TODO: Implement khi c√≥ API cho admin
      // Hi·ªán t·∫°i tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
      debugPrint('üìä Admin Stats - Placeholder data');
      
      return UserStats.forAdmin(
        totalClasses: 0,
        totalStudents: 0,
        totalQuizzes: 0,
      );
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l·∫•y th·ªëng k√™ admin: $e');
      return UserStats.empty();
    }
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<bool> updateUserProfile(dynamic updatedUser) async {
    try {
      debugPrint('üîÑ UserProfileService - C·∫≠p nh·∫≠t th√¥ng tin user: ${updatedUser.id}');
      
      // TODO: Implement API c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
      // Hi·ªán t·∫°i ch·ªâ return true
      await Future.delayed(const Duration(seconds: 1)); // Simulate API call
      
      debugPrint('‚úÖ UserProfileService - C·∫≠p nh·∫≠t th√†nh c√¥ng');
      return true;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi c·∫≠p nh·∫≠t: $e');
      return false;
    }
  }

  /// Upload avatar m·ªõi
  Future<String?> uploadAvatar(String userId, String imagePath) async {
    try {
      debugPrint('üîÑ UserProfileService - Upload avatar cho user: $userId');
      
      // TODO: Implement API upload avatar
      // Hi·ªán t·∫°i ch·ªâ return placeholder URL
      await Future.delayed(const Duration(seconds: 2)); // Simulate upload
      
      const avatarUrl = 'https://via.placeholder.com/150';
      debugPrint('‚úÖ UserProfileService - Upload avatar th√†nh c√¥ng: $avatarUrl');
      return avatarUrl;
    } catch (e) {
      debugPrint('‚ùå UserProfileService - L·ªói khi upload avatar: $e');
      return null;
    }
  }
}
