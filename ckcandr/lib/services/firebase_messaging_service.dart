import 'dart:convert';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:ckcandr/models/thong_bao_model.dart';
import 'package:ckcandr/services/system_notification_service.dart';
import 'package:ckcandr/firebase_options.dart';

/// Background message handler - PH·∫¢I ·ªü top level, kh√¥ng ƒë∆∞·ª£c trong class
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Kh·ªüi t·∫°o Firebase n·∫øu ch∆∞a c√≥
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  
  debugPrint('üî• Background message received: ${message.messageId}');
  debugPrint('üî• Background message data: ${message.data}');
  
  // Hi·ªÉn th·ªã notification ngay c·∫£ khi app b·ªã kill
  await _showBackgroundNotification(message);
}

/// Hi·ªÉn th·ªã notification trong background
Future<void> _showBackgroundNotification(RemoteMessage message) async {
  try {
    final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = 
        FlutterLocalNotificationsPlugin();
    
    // Kh·ªüi t·∫°o plugin
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    
    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );
    
    await flutterLocalNotificationsPlugin.initialize(initializationSettings);
    
    // T·∫°o notification channel
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel',
      'High Importance Notifications',
      description: 'This channel is used for important notifications.',
      importance: Importance.max,
      playSound: true,
      enableVibration: true,
      showBadge: true,
    );
    
    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
        flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>();
    
    await androidImplementation?.createNotificationChannel(channel);
    
    // Hi·ªÉn th·ªã notification
    await flutterLocalNotificationsPlugin.show(
      message.hashCode,
      message.notification?.title ?? 'Th√¥ng b√°o m·ªõi',
      message.notification?.body ?? 'B·∫°n c√≥ th√¥ng b√°o m·ªõi',
      NotificationDetails(
        android: AndroidNotificationDetails(
          channel.id,
          channel.name,
          channelDescription: channel.description,
          importance: Importance.max,
          priority: Priority.max,
          showWhen: true,
          icon: '@mipmap/ic_launcher',
          playSound: true,
          enableVibration: true,
          enableLights: true,
          ledColor: const Color(0xFF2196F3),
          autoCancel: false,
          ongoing: false,
          styleInformation: BigTextStyleInformation(
            message.notification?.body ?? 'B·∫°n c√≥ th√¥ng b√°o m·ªõi',
            contentTitle: message.notification?.title ?? 'Th√¥ng b√°o m·ªõi',
          ),
        ),
      ),
      payload: jsonEncode(message.data),
    );
    
    debugPrint('‚úÖ Background notification displayed successfully');
  } catch (e) {
    debugPrint('‚ùå Error showing background notification: $e');
  }
}

/// Service qu·∫£n l√Ω Firebase Cloud Messaging
class FirebaseMessagingService {
  static final FirebaseMessagingService _instance = FirebaseMessagingService._internal();
  factory FirebaseMessagingService() => _instance;
  FirebaseMessagingService._internal();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final SystemNotificationService _systemNotificationService = SystemNotificationService();
  
  bool _isInitialized = false;
  String? _fcmToken;

  /// Kh·ªüi t·∫°o Firebase Messaging
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // Kh·ªüi t·∫°o Firebase
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      
      // Request permissions
      await _requestPermissions();
      
      // ƒêƒÉng k√Ω background message handler
      FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
      
      // L·∫•y FCM token
      await _getFCMToken();
      
      // L·∫Øng nghe messages khi app ƒëang m·ªü
      _setupForegroundMessageListener();
      
      // L·∫Øng nghe khi tap v√†o notification
      _setupNotificationTapListener();
      
      // L·∫Øng nghe token refresh
      _setupTokenRefreshListener();
      
      _isInitialized = true;
      debugPrint('‚úÖ Firebase Messaging Service initialized');
      debugPrint('üì± FCM Token: $_fcmToken');
      
    } catch (e) {
      debugPrint('‚ùå Error initializing Firebase Messaging: $e');
    }
  }

  /// Request notification permissions
  Future<void> _requestPermissions() async {
    final NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    debugPrint('üì± FCM Permission status: ${settings.authorizationStatus}');
    
    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      debugPrint('‚úÖ User granted permission for notifications');
    } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
      debugPrint('‚ö†Ô∏è User granted provisional permission');
    } else {
      debugPrint('‚ùå User declined or has not accepted permission');
    }
  }

  /// L·∫•y FCM token
  Future<String?> _getFCMToken() async {
    try {
      _fcmToken = await _firebaseMessaging.getToken();
      debugPrint('üì± FCM Token: $_fcmToken');
      return _fcmToken;
    } catch (e) {
      debugPrint('‚ùå Error getting FCM token: $e');
      return null;
    }
  }

  /// L·∫Øng nghe messages khi app ƒëang m·ªü (foreground)
  void _setupForegroundMessageListener() {
    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      debugPrint('üî• Foreground message received: ${message.messageId}');
      debugPrint('üî• Message data: ${message.data}');
      
      // Hi·ªÉn th·ªã notification khi app ƒëang m·ªü
      if (message.notification != null) {
        await _showForegroundNotification(message);
      }
    });
  }

  /// Hi·ªÉn th·ªã notification khi app ƒëang m·ªü
  Future<void> _showForegroundNotification(RemoteMessage message) async {
    try {
      // T·∫°o ThongBao object t·ª´ message data n·∫øu c√≥
      ThongBao? notification;
      if (message.data.isNotEmpty) {
        try {
          notification = ThongBao.fromJson(message.data);
        } catch (e) {
          debugPrint('‚ö†Ô∏è Could not parse notification data: $e');
        }
      }

      // N·∫øu c√≥ notification object, s·ª≠ d·ª•ng SystemNotificationService
      if (notification != null) {
        await _systemNotificationService.showNotification(notification);
      } else {
        // Fallback: hi·ªÉn th·ªã notification ƒë∆°n gi·∫£n
        await _systemNotificationService.showSimpleNotification(
          title: message.notification?.title ?? 'Th√¥ng b√°o m·ªõi',
          body: message.notification?.body ?? 'B·∫°n c√≥ th√¥ng b√°o m·ªõi',
          payload: jsonEncode(message.data),
        );
      }
    } catch (e) {
      debugPrint('‚ùå Error showing foreground notification: $e');
    }
  }

  /// L·∫Øng nghe khi user tap v√†o notification
  void _setupNotificationTapListener() {
    // Khi app ƒë∆∞·ª£c m·ªü t·ª´ notification (terminated state)
    FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) {
        debugPrint('üî• App opened from notification: ${message.messageId}');
        _handleNotificationTap(message);
      }
    });

    // Khi app ƒë∆∞·ª£c m·ªü t·ª´ notification (background state)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      debugPrint('üî• App opened from background notification: ${message.messageId}');
      _handleNotificationTap(message);
    });
  }

  /// X·ª≠ l√Ω khi user tap v√†o notification
  void _handleNotificationTap(RemoteMessage message) {
    debugPrint('üî• Handling notification tap: ${message.data}');
    
    // TODO: Navigate to appropriate screen based on notification data
    // V√≠ d·ª•: navigate to notifications screen
    // if (message.data['type'] == 'notification') {
    //   // Navigate to notifications screen
    // }
  }

  /// L·∫Øng nghe token refresh
  void _setupTokenRefreshListener() {
    _firebaseMessaging.onTokenRefresh.listen((String token) {
      debugPrint('üîÑ FCM Token refreshed: $token');
      _fcmToken = token;
      // TODO: Send new token to server
    });
  }

  /// L·∫•y FCM token hi·ªán t·∫°i
  String? get fcmToken => _fcmToken;

  /// Subscribe to topic
  Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging.subscribeToTopic(topic);
      debugPrint('‚úÖ Subscribed to topic: $topic');
    } catch (e) {
      debugPrint('‚ùå Error subscribing to topic $topic: $e');
    }
  }

  /// Unsubscribe from topic
  Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging.unsubscribeFromTopic(topic);
      debugPrint('‚úÖ Unsubscribed from topic: $topic');
    } catch (e) {
      debugPrint('‚ùå Error unsubscribing from topic $topic: $e');
    }
  }

  /// Dispose service
  void dispose() {
    _isInitialized = false;
  }
}
