import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/models/de_thi_model.dart';
import 'package:ckcandr/services/api_service.dart';
import 'system_notification_service.dart';

/// Service ƒë·ªÉ qu·∫£n l√Ω th√¥ng b√°o t·ª± ƒë·ªông khi ƒë·∫øn gi·ªù thi
class ExamReminderService {
  final ApiService _apiService;
  Timer? _reminderTimer;
  List<ExamForClassModel> _trackedExams = [];
  final Set<int> _notifiedExams = {};

  // System notification service
  final SystemNotificationService _systemNotificationService = SystemNotificationService();

  ExamReminderService(this._apiService);

  /// B·∫Øt ƒë·∫ßu theo d√µi c√°c ƒë·ªÅ thi v√† g·ª≠i th√¥ng b√°o
  void startExamReminders() {
    // Ki·ªÉm tra m·ªói ph√∫t
    _reminderTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
      _checkUpcomingExams();
    });
    
    // Ki·ªÉm tra ngay l·∫≠p t·ª©c
    _checkUpcomingExams();
  }

  /// D·ª´ng theo d√µi th√¥ng b√°o
  void stopExamReminders() {
    _reminderTimer?.cancel();
    _reminderTimer = null;
  }

  /// C·∫≠p nh·∫≠t danh s√°ch ƒë·ªÅ thi c·∫ßn theo d√µi
  void updateTrackedExams(List<ExamForClassModel> exams) {
    _trackedExams = exams;
  }

  /// Ki·ªÉm tra c√°c ƒë·ªÅ thi s·∫Øp di·ªÖn ra v√† g·ª≠i th√¥ng b√°o
  Future<void> _checkUpcomingExams() async {
    try {
      final now = DateTime.now();
      
      for (final exam in _trackedExams) {
        if (exam.thoigiantbatdau == null) continue;
        
        final timeUntilExam = exam.thoigiantbatdau!.difference(now);
        
        // Th√¥ng b√°o 30 ph√∫t tr∆∞·ªõc
        if (timeUntilExam.inMinutes <= 30 && 
            timeUntilExam.inMinutes > 25 && 
            !_notifiedExams.contains(exam.made)) {
          await _sendExamReminderNotification(exam, '30 ph√∫t');
          _notifiedExams.add(exam.made);
        }
        
        // Th√¥ng b√°o 10 ph√∫t tr∆∞·ªõc
        else if (timeUntilExam.inMinutes <= 10 && 
                 timeUntilExam.inMinutes > 5 && 
                 !_notifiedExams.contains(exam.made + 1000)) {
          await _sendExamReminderNotification(exam, '10 ph√∫t');
          _notifiedExams.add(exam.made + 1000);
        }
        
        // Th√¥ng b√°o 5 ph√∫t tr∆∞·ªõc
        else if (timeUntilExam.inMinutes <= 5 && 
                 timeUntilExam.inMinutes > 0 && 
                 !_notifiedExams.contains(exam.made + 2000)) {
          await _sendExamReminderNotification(exam, '5 ph√∫t');
          _notifiedExams.add(exam.made + 2000);
        }
        
        // Th√¥ng b√°o khi ƒë·∫øn gi·ªù thi
        else if (timeUntilExam.inMinutes <= 0 && 
                 timeUntilExam.inMinutes > -5 && 
                 !_notifiedExams.contains(exam.made + 3000)) {
          await _sendExamStartNotification(exam);
          _notifiedExams.add(exam.made + 3000);
        }
      }
    } catch (e) {
      debugPrint('Error checking upcoming exams: $e');
    }
  }

  /// G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü tr∆∞·ªõc gi·ªù thi
  Future<void> _sendExamReminderNotification(ExamForClassModel exam, String timeRemaining) async {
    try {
      // Hi·ªÉn th·ªã system notification
      await _systemNotificationService.showExamReminder(
        examName: exam.tende ?? 'ƒê·ªÅ thi',
        timeRemaining: timeRemaining,
        examId: exam.made,
      );

      debugPrint('üì¢ Exam reminder sent: ${exam.tende} - $timeRemaining remaining');
    } catch (e) {
      debugPrint('Failed to send exam reminder: $e');
    }
  }

  /// G·ª≠i th√¥ng b√°o khi ƒë·∫øn gi·ªù thi
  Future<void> _sendExamStartNotification(ExamForClassModel exam) async {
    try {
      // Hi·ªÉn th·ªã system notification
      await _systemNotificationService.showExamStartNotification(
        examName: exam.tende ?? 'ƒê·ªÅ thi',
        examId: exam.made,
      );

      debugPrint('üì¢ Exam start notification sent: ${exam.tende}');
    } catch (e) {
      debugPrint('Failed to send exam start notification: $e');
    }
  }




  /// X√≥a cache th√¥ng b√°o ƒë√£ g·ª≠i (g·ªçi khi c·∫ßn reset)
  void clearNotificationCache() {
    _notifiedExams.clear();
  }

  /// Ki·ªÉm tra xem c√≥ ƒë·ªÅ thi n√†o s·∫Øp di·ªÖn ra kh√¥ng
  bool hasUpcomingExams() {
    final now = DateTime.now();
    return _trackedExams.any((exam) {
      if (exam.thoigiantbatdau == null) return false;
      final timeUntilExam = exam.thoigiantbatdau!.difference(now);
      return timeUntilExam.inMinutes <= 30 && timeUntilExam.inMinutes > 0;
    });
  }

  /// L·∫•y ƒë·ªÅ thi s·∫Øp di·ªÖn ra nh·∫•t
  ExamForClassModel? getNextUpcomingExam() {
    final now = DateTime.now();
    ExamForClassModel? nextExam;
    Duration? shortestTime;

    for (final exam in _trackedExams) {
      if (exam.thoigiantbatdau == null) continue;
      
      final timeUntilExam = exam.thoigiantbatdau!.difference(now);
      if (timeUntilExam.inMinutes > 0) {
        if (shortestTime == null || timeUntilExam < shortestTime) {
          shortestTime = timeUntilExam;
          nextExam = exam;
        }
      }
    }

    return nextExam;
  }
}

/// Provider cho ExamReminderService
final examReminderServiceProvider = Provider<ExamReminderService>((ref) {
  final apiService = ref.read(apiServiceProvider);
  return ExamReminderService(apiService);
});
