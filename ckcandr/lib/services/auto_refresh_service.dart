import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/models/user_model.dart';
import 'package:ckcandr/providers/user_provider.dart';

/// Service qu·∫£n l√Ω auto-refresh cho c√°c m√†n h√¨nh kh√°c nhau v·ªõi ngo·∫°i l·ªá theo role
/// C√ÅC TRANG B·ªä C·∫§M AUTO-REFRESH:
/// - Admin: KH√îNG refresh user, ph√¢n c√¥ng, l·ªõp, m√¥n h·ªçc
/// - Gi√°o vi√™n: KH√îNG refresh l·ªõp, c√¢u h·ªèi, ƒë·ªÅ thi
/// - Sinh vi√™n: KH√îNG refresh l·ªõp v√† b√†i l√†m
class AutoRefreshService {
  static final AutoRefreshService _instance = AutoRefreshService._internal();
  factory AutoRefreshService() => _instance;
  AutoRefreshService._internal();

  final Map<String, Timer> _timers = {};
  final Map<String, VoidCallback> _callbacks = {};

  // Danh s√°ch c√°c trang B·ªä C·∫§M auto-refresh theo role
  static final Map<UserRole, Set<String>> _roleRefreshBlacklist = {
    UserRole.admin: {
      AutoRefreshKeys.adminUsers,        // Qu·∫£n l√Ω ng∆∞·ªùi d√πng
      AutoRefreshKeys.adminAssignments,  // Ph√¢n c√¥ng gi·∫£ng d·∫°y
      AutoRefreshKeys.adminClasses,      // Qu·∫£n l√Ω l·ªõp h·ªçc
      AutoRefreshKeys.adminSubjects,     // Qu·∫£n l√Ω m√¥n h·ªçc
    },
    UserRole.giangVien: {
      AutoRefreshKeys.teacherClasses,    // L·ªõp h·ªçc
      AutoRefreshKeys.teacherQuestions,  // C√¢u h·ªèi
      AutoRefreshKeys.teacherExams,      // ƒê·ªÅ thi
    },
    UserRole.sinhVien: {
      AutoRefreshKeys.studentClasses,    // L·ªõp h·ªçc
      AutoRefreshKeys.studentExams,      // B√†i l√†m
    },
  };

  // M√†n h√¨nh b·ªã c·∫•m auto-refresh (v√≠ d·ª•: ƒëang l√†m b√†i thi)
  static final Set<String> _globalBlacklist = {
    AutoRefreshKeys.examTaking,
    AutoRefreshKeys.examSubmitting,
  };

  /// Ki·ªÉm tra xem c√≥ ƒë∆∞·ª£c ph√©p auto-refresh kh√¥ng theo role v√† m√†n h√¨nh
  bool _canAutoRefresh(String key, UserRole? userRole) {
    // Ki·ªÉm tra blacklist to√†n c·ª•c tr∆∞·ªõc
    if (_globalBlacklist.contains(key)) {
      debugPrint('üö´ Auto-refresh blocked (global blacklist): $key');
      return false;
    }

    // N·∫øu kh√¥ng c√≥ role, cho ph√©p refresh
    if (userRole == null) return true;

    // Ki·ªÉm tra blacklist theo role - n·∫øu key n·∫±m trong blacklist th√¨ KH√îNG cho ph√©p refresh
    final blockedKeys = _roleRefreshBlacklist[userRole] ?? <String>{};

    if (blockedKeys.contains(key)) {
      debugPrint('üö´ Auto-refresh blocked for $userRole: $key');
      debugPrint('   Blocked keys for $userRole: ${blockedKeys.join(', ')}');
      return false;
    }

    // N·∫øu kh√¥ng n·∫±m trong blacklist, cho ph√©p refresh
    debugPrint('‚úÖ Auto-refresh allowed for $userRole: $key');
    return true;
  }

  /// B·∫Øt ƒë·∫ßu auto-refresh cho m·ªôt m√†n h√¨nh v·ªõi ki·ªÉm tra ngo·∫°i l·ªá
  /// [key] - Unique key cho m√†n h√¨nh
  /// [callback] - Function s·∫Ω ƒë∆∞·ª£c g·ªçi m·ªói 30s
  /// [userRole] - Role c·ªßa user hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra quy·ªÅn
  /// [intervalSeconds] - Kho·∫£ng th·ªùi gian refresh (m·∫∑c ƒë·ªãnh 30s)
  void startAutoRefresh({
    required String key,
    required VoidCallback callback,
    UserRole? userRole,
    int intervalSeconds = 30,
  }) {
    // Ki·ªÉm tra quy·ªÅn refresh tr∆∞·ªõc
    if (!_canAutoRefresh(key, userRole)) {
      return;
    }

    // D·ª´ng timer c≈© n·∫øu c√≥
    stopAutoRefresh(key);

    debugPrint('‚úÖ Starting auto-refresh for $key (role: $userRole, every ${intervalSeconds}s)');

    // L∆∞u callback
    _callbacks[key] = callback;

    // T·∫°o timer m·ªõi
    _timers[key] = Timer.periodic(
      Duration(seconds: intervalSeconds),
      (timer) {
        // Ki·ªÉm tra l·∫°i quy·ªÅn tr∆∞·ªõc khi refresh (c√≥ th·ªÉ role ƒë√£ thay ƒë·ªïi)
        if (_canAutoRefresh(key, userRole)) {
          debugPrint('üîÑ Auto-refreshing $key');
          callback();
        } else {
          debugPrint('üö´ Auto-refresh permission revoked for $key, stopping...');
          stopAutoRefresh(key);
        }
      },
    );
  }

  /// D·ª´ng auto-refresh cho m·ªôt m√†n h√¨nh
  void stopAutoRefresh(String key) {
    final timer = _timers[key];
    if (timer != null) {
      debugPrint('‚èπÔ∏è Stopping auto-refresh for $key');
      timer.cancel();
      _timers.remove(key);
      _callbacks.remove(key);
    }
  }

  /// T·∫°m d·ª´ng auto-refresh cho m·ªôt m√†n h√¨nh
  void pauseAutoRefresh(String key) {
    final timer = _timers[key];
    if (timer != null) {
      debugPrint('‚è∏Ô∏è Pausing auto-refresh for $key');
      timer.cancel();
      _timers.remove(key);
      // Gi·ªØ callback ƒë·ªÉ c√≥ th·ªÉ resume
    }
  }

  /// Ti·∫øp t·ª•c auto-refresh cho m·ªôt m√†n h√¨nh ƒë√£ b·ªã pause
  void resumeAutoRefresh(String key, {int intervalSeconds = 30}) {
    final callback = _callbacks[key];
    if (callback != null && !_timers.containsKey(key)) {
      debugPrint('‚ñ∂Ô∏è Resuming auto-refresh for $key');
      _timers[key] = Timer.periodic(
        Duration(seconds: intervalSeconds),
        (timer) {
          debugPrint('üîÑ Auto-refreshing $key');
          callback();
        },
      );
    }
  }

  /// Ki·ªÉm tra xem m·ªôt m√†n h√¨nh c√≥ ƒëang auto-refresh kh√¥ng
  bool isAutoRefreshing(String key) {
    return _timers.containsKey(key) && _timers[key]!.isActive;
  }

  /// D·ª´ng t·∫•t c·∫£ auto-refresh
  void stopAllAutoRefresh() {
    debugPrint('‚èπÔ∏è Stopping all auto-refresh');
    for (final timer in _timers.values) {
      timer.cancel();
    }
    _timers.clear();
    _callbacks.clear();
  }

  /// L·∫•y danh s√°ch c√°c m√†n h√¨nh ƒëang auto-refresh
  List<String> getActiveRefreshKeys() {
    return _timers.keys.where((key) => _timers[key]!.isActive).toList();
  }

  /// Th√™m key v√†o blacklist to√†n c·ª•c
  static void addToGlobalBlacklist(String key) {
    _globalBlacklist.add(key);
    debugPrint('üö´ Added to global blacklist: $key');
  }

  /// X√≥a key kh·ªèi blacklist to√†n c·ª•c
  static void removeFromGlobalBlacklist(String key) {
    _globalBlacklist.remove(key);
    debugPrint('‚úÖ Removed from global blacklist: $key');
  }

  /// Ki·ªÉm tra key c√≥ trong blacklist kh√¥ng
  static bool isInGlobalBlacklist(String key) {
    return _globalBlacklist.contains(key);
  }

  /// L·∫•y danh s√°ch key b·ªã c·∫•m refresh theo role
  static Set<String> getBlockedKeysForRole(UserRole role) {
    return _roleRefreshBlacklist[role] ?? <String>{};
  }

  /// Ki·ªÉm tra xem role c√≥ ƒë∆∞·ª£c ph√©p refresh key n√†y kh√¥ng (kh√¥ng n·∫±m trong blacklist)
  static bool isKeyAllowedForRole(String key, UserRole role) {
    final blockedKeys = _roleRefreshBlacklist[role] ?? <String>{};
    return !blockedKeys.contains(key); // ƒê·∫£o ng∆∞·ª£c logic: kh√¥ng n·∫±m trong blacklist = ƒë∆∞·ª£c ph√©p
  }

  /// In th√¥ng tin debug v·ªÅ quy·ªÅn refresh
  void printRefreshPermissions(UserRole? role) {
    debugPrint('üîç Auto-refresh permissions:');
    debugPrint('   Current role: $role');
    debugPrint('   Global blacklist: ${_globalBlacklist.join(', ')}');
    if (role != null) {
      final blocked = _roleRefreshBlacklist[role] ?? <String>{};
      debugPrint('   Blocked for $role: ${blocked.join(', ')}');
    }
    debugPrint('   Currently active: ${getActiveRefreshKeys().join(', ')}');
  }

  /// Dispose service
  void dispose() {
    stopAllAutoRefresh();
  }
}

/// Mixin ƒë·ªÉ d·ªÖ d√†ng s·ª≠ d·ª•ng auto-refresh trong c√°c widget v·ªõi role checking
mixin AutoRefreshMixin<T extends StatefulWidget> on State<T> {
  final AutoRefreshService _autoRefreshService = AutoRefreshService();

  /// Key unique cho m√†n h√¨nh n√†y
  String get autoRefreshKey;

  /// Callback s·∫Ω ƒë∆∞·ª£c g·ªçi khi auto-refresh
  void onAutoRefresh();

  /// Role c·ªßa user hi·ªán t·∫°i - t·ª± ƒë·ªông l·∫•y t·ª´ provider
  UserRole? get currentUserRole {
    // C·∫ßn cast State th√†nh ConsumerState ƒë·ªÉ truy c·∫≠p ref
    if (this is ConsumerState) {
      final consumerState = this as ConsumerState;
      final currentUser = consumerState.ref.read(currentUserProvider);
      return currentUser?.quyen;
    }
    return null;
  }

  /// C√≥ n√™n auto-refresh kh√¥ng (m·∫∑c ƒë·ªãnh true)
  bool get shouldAutoRefresh => true;

  /// Kho·∫£ng th·ªùi gian refresh (m·∫∑c ƒë·ªãnh 30s)
  int get refreshIntervalSeconds => 30;

  @override
  void initState() {
    super.initState();
    if (shouldAutoRefresh) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        startAutoRefresh();
      });
    }
  }

  @override
  void dispose() {
    stopAutoRefresh();
    super.dispose();
  }

  /// B·∫Øt ƒë·∫ßu auto-refresh v·ªõi role checking
  void startAutoRefresh() {
    if (shouldAutoRefresh) {
      _autoRefreshService.startAutoRefresh(
        key: autoRefreshKey,
        callback: onAutoRefresh,
        userRole: currentUserRole,
        intervalSeconds: refreshIntervalSeconds,
      );
    }
  }

  /// D·ª´ng auto-refresh
  void stopAutoRefresh() {
    _autoRefreshService.stopAutoRefresh(autoRefreshKey);
  }

  /// T·∫°m d·ª´ng auto-refresh
  void pauseAutoRefresh() {
    _autoRefreshService.pauseAutoRefresh(autoRefreshKey);
  }

  /// Ti·∫øp t·ª•c auto-refresh
  void resumeAutoRefresh() {
    if (shouldAutoRefresh) {
      _autoRefreshService.resumeAutoRefresh(
        autoRefreshKey,
        intervalSeconds: refreshIntervalSeconds,
      );
    }
  }

  /// Ki·ªÉm tra xem c√≥ ƒëang auto-refresh kh√¥ng
  bool get isAutoRefreshing => _autoRefreshService.isAutoRefreshing(autoRefreshKey);
}

/// Constants cho c√°c auto-refresh keys theo role v√† ch·ª©c nƒÉng
class AutoRefreshKeys {
  // Admin - Qu·∫£n l√Ω h·ªá th·ªëng
  static const String adminUsers = 'admin_users';              // Qu·∫£n l√Ω ng∆∞·ªùi d√πng
  static const String adminAssignments = 'admin_assignments';  // Ph√¢n c√¥ng gi·∫£ng d·∫°y
  static const String adminClasses = 'admin_classes';          // Qu·∫£n l√Ω l·ªõp h·ªçc
  static const String adminSubjects = 'admin_subjects';        // Qu·∫£n l√Ω m√¥n h·ªçc
  static const String adminPermissions = 'admin_permissions';  // Qu·∫£n l√Ω quy·ªÅn
  static const String adminNotifications = 'admin_notifications'; // Th√¥ng b√°o admin

  // Gi·∫£ng vi√™n - Gi·∫£ng d·∫°y v√† thi c·ª≠
  static const String teacherClasses = 'teacher_classes';      // L·ªõp h·ªçc ƒë∆∞·ª£c ph√¢n c√¥ng
  static const String teacherQuestions = 'teacher_questions';  // Ng√¢n h√†ng c√¢u h·ªèi
  static const String teacherExams = 'teacher_exams';          // ƒê·ªÅ thi ƒë√£ t·∫°o
  static const String teacherExamResults = 'teacher_exam_results'; // K·∫øt qu·∫£ thi
  static const String teacherSubjects = 'teacher_subjects';    // M√¥n h·ªçc ƒë∆∞·ª£c ph√¢n c√¥ng

  // Sinh vi√™n - H·ªçc t·∫≠p v√† thi c·ª≠
  static const String studentClasses = 'student_classes';      // L·ªõp h·ªçc ƒë√£ ƒëƒÉng k√Ω
  static const String studentExams = 'student_exams';          // B√†i ki·ªÉm tra kh·∫£ d·ª•ng
  static const String studentNotifications = 'student_notifications'; // Th√¥ng b√°o sinh vi√™n
  static const String studentResults = 'student_results';      // K·∫øt qu·∫£ thi c·ªßa sinh vi√™n

  // M√†n h√¨nh ƒë·∫∑c bi·ªát - B·ªã c·∫•m auto-refresh
  static const String examTaking = 'exam_taking';              // ƒêang l√†m b√†i thi
  static const String examSubmitting = 'exam_submitting';      // ƒêang n·ªôp b√†i
  static const String formEditing = 'form_editing';            // ƒêang ch·ªânh s·ª≠a form
  static const String settingsScreen = 'settings_screen';     // M√†n h√¨nh c√†i ƒë·∫∑t
}

