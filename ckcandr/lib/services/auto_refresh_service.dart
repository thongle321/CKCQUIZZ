import 'dart:async';
import 'package:flutter/material.dart';

/// Service qu·∫£n l√Ω auto-refresh cho c√°c m√†n h√¨nh kh√°c nhau
/// - Gi√°o vi√™n: Refresh c√¢u h·ªèi v√† ƒë·ªÅ thi m·ªói 30s
/// - H·ªçc sinh: Refresh b√†i thi m·ªói 30s (tr·ª´ khi ƒëang l√†m b√†i)
/// - Admin: Refresh quy·ªÅn v√† ph√¢n c√¥ng m·ªói 30s
class AutoRefreshService {
  static final AutoRefreshService _instance = AutoRefreshService._internal();
  factory AutoRefreshService() => _instance;
  AutoRefreshService._internal();

  final Map<String, Timer> _timers = {};
  final Map<String, VoidCallback> _callbacks = {};

  /// B·∫Øt ƒë·∫ßu auto-refresh cho m·ªôt m√†n h√¨nh
  /// [key] - Unique key cho m√†n h√¨nh (vd: 'teacher_questions', 'student_exams')
  /// [callback] - Function s·∫Ω ƒë∆∞·ª£c g·ªçi m·ªói 30s
  /// [intervalSeconds] - Kho·∫£ng th·ªùi gian refresh (m·∫∑c ƒë·ªãnh 30s)
  void startAutoRefresh({
    required String key,
    required VoidCallback callback,
    int intervalSeconds = 30,
  }) {
    // D·ª´ng timer c≈© n·∫øu c√≥
    stopAutoRefresh(key);

    debugPrint('üîÑ Starting auto-refresh for $key (every ${intervalSeconds}s)');
    
    // L∆∞u callback
    _callbacks[key] = callback;
    
    // T·∫°o timer m·ªõi
    _timers[key] = Timer.periodic(
      Duration(seconds: intervalSeconds),
      (timer) {
        debugPrint('üîÑ Auto-refreshing $key');
        callback();
      },
    );
  }

  /// D·ª´ng auto-refresh cho m·ªôt m√†n h√¨nh
  void stopAutoRefresh(String key) {
    final timer = _timers[key];
    if (timer != null) {
      debugPrint('‚èπÔ∏è Stopping auto-refresh for $key');
      timer.cancel();
      _timers.remove(key);
      _callbacks.remove(key);
    }
  }

  /// T·∫°m d·ª´ng auto-refresh cho m·ªôt m√†n h√¨nh
  void pauseAutoRefresh(String key) {
    final timer = _timers[key];
    if (timer != null) {
      debugPrint('‚è∏Ô∏è Pausing auto-refresh for $key');
      timer.cancel();
      _timers.remove(key);
      // Gi·ªØ callback ƒë·ªÉ c√≥ th·ªÉ resume
    }
  }

  /// Ti·∫øp t·ª•c auto-refresh cho m·ªôt m√†n h√¨nh ƒë√£ b·ªã pause
  void resumeAutoRefresh(String key, {int intervalSeconds = 30}) {
    final callback = _callbacks[key];
    if (callback != null && !_timers.containsKey(key)) {
      debugPrint('‚ñ∂Ô∏è Resuming auto-refresh for $key');
      _timers[key] = Timer.periodic(
        Duration(seconds: intervalSeconds),
        (timer) {
          debugPrint('üîÑ Auto-refreshing $key');
          callback();
        },
      );
    }
  }

  /// Ki·ªÉm tra xem m·ªôt m√†n h√¨nh c√≥ ƒëang auto-refresh kh√¥ng
  bool isAutoRefreshing(String key) {
    return _timers.containsKey(key) && _timers[key]!.isActive;
  }

  /// D·ª´ng t·∫•t c·∫£ auto-refresh
  void stopAllAutoRefresh() {
    debugPrint('‚èπÔ∏è Stopping all auto-refresh');
    for (final timer in _timers.values) {
      timer.cancel();
    }
    _timers.clear();
    _callbacks.clear();
  }

  /// L·∫•y danh s√°ch c√°c m√†n h√¨nh ƒëang auto-refresh
  List<String> getActiveRefreshKeys() {
    return _timers.keys.where((key) => _timers[key]!.isActive).toList();
  }

  /// Dispose service
  void dispose() {
    stopAllAutoRefresh();
  }
}

/// Mixin ƒë·ªÉ d·ªÖ d√†ng s·ª≠ d·ª•ng auto-refresh trong c√°c widget
mixin AutoRefreshMixin<T extends StatefulWidget> on State<T> {
  final AutoRefreshService _autoRefreshService = AutoRefreshService();
  
  /// Key unique cho m√†n h√¨nh n√†y
  String get autoRefreshKey;
  
  /// Callback s·∫Ω ƒë∆∞·ª£c g·ªçi khi auto-refresh
  void onAutoRefresh();
  
  /// C√≥ n√™n auto-refresh kh√¥ng (m·∫∑c ƒë·ªãnh true)
  bool get shouldAutoRefresh => true;
  
  /// Kho·∫£ng th·ªùi gian refresh (m·∫∑c ƒë·ªãnh 30s)
  int get refreshIntervalSeconds => 30;

  @override
  void initState() {
    super.initState();
    if (shouldAutoRefresh) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        startAutoRefresh();
      });
    }
  }

  @override
  void dispose() {
    stopAutoRefresh();
    super.dispose();
  }

  /// B·∫Øt ƒë·∫ßu auto-refresh
  void startAutoRefresh() {
    if (shouldAutoRefresh) {
      _autoRefreshService.startAutoRefresh(
        key: autoRefreshKey,
        callback: onAutoRefresh,
        intervalSeconds: refreshIntervalSeconds,
      );
    }
  }

  /// D·ª´ng auto-refresh
  void stopAutoRefresh() {
    _autoRefreshService.stopAutoRefresh(autoRefreshKey);
  }

  /// T·∫°m d·ª´ng auto-refresh
  void pauseAutoRefresh() {
    _autoRefreshService.pauseAutoRefresh(autoRefreshKey);
  }

  /// Ti·∫øp t·ª•c auto-refresh
  void resumeAutoRefresh() {
    if (shouldAutoRefresh) {
      _autoRefreshService.resumeAutoRefresh(
        autoRefreshKey,
        intervalSeconds: refreshIntervalSeconds,
      );
    }
  }

  /// Ki·ªÉm tra xem c√≥ ƒëang auto-refresh kh√¥ng
  bool get isAutoRefreshing => _autoRefreshService.isAutoRefreshing(autoRefreshKey);
}

/// Constants cho c√°c auto-refresh keys
class AutoRefreshKeys {
  // Gi√°o vi√™n
  static const String teacherQuestions = 'teacher_questions';
  static const String teacherExams = 'teacher_exams';
  static const String teacherExamResults = 'teacher_exam_results';
  
  // H·ªçc sinh
  static const String studentExams = 'student_exams';
  static const String studentNotifications = 'student_notifications';
  
  // Admin
  static const String adminPermissions = 'admin_permissions';
  static const String adminAssignments = 'admin_assignments';
  static const String adminUsers = 'admin_users';
  static const String adminSubjects = 'admin_subjects';
}
