/// Utility ƒë·ªÉ test k·∫øt n·ªëi HTTP v√† HTTPS v·ªõi server
/// 
/// File n√†y gi√∫p ki·ªÉm tra xem server c√≥ th·ªÉ k·∫øt n·ªëi qua HTTP hay HTTPS

import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:ckcandr/core/config/api_config.dart';

class ConnectionTest {
  /// Test k·∫øt n·ªëi v·ªõi server qua HTTP
  static Future<bool> testHttpConnection() async {
    try {
      final url = Uri.parse('${ApiConfig.httpUrl}/api/Auth/test');
      print('üîç Testing HTTP connection: $url');
      
      final response = await http.get(url).timeout(
        const Duration(seconds: 10),
      );
      
      print('‚úÖ HTTP Response: ${response.statusCode}');
      return response.statusCode == 200 || response.statusCode == 404; // 404 is OK if endpoint doesn't exist
    } catch (e) {
      print('‚ùå HTTP Connection failed: $e');
      return false;
    }
  }

  /// Test k·∫øt n·ªëi v·ªõi server qua HTTPS
  static Future<bool> testHttpsConnection() async {
    try {
      // Create HTTP client with certificate bypass
      final httpClient = HttpClient()
        ..badCertificateCallback = (cert, host, port) {
          return host == 'ckcquizz.ddnsking.com' || host.contains('ddnsking.com');
        }
        ..connectionTimeout = const Duration(seconds: 10);

      final request = await httpClient.getUrl(
        Uri.parse('${ApiConfig.httpsUrl}/api/Auth/test')
      );
      
      print('üîç Testing HTTPS connection: ${ApiConfig.httpsUrl}/api/Auth/test');
      
      final response = await request.close();
      
      print('‚úÖ HTTPS Response: ${response.statusCode}');
      httpClient.close();
      
      return response.statusCode == 200 || response.statusCode == 404; // 404 is OK if endpoint doesn't exist
    } catch (e) {
      print('‚ùå HTTPS Connection failed: $e');
      return false;
    }
  }

  /// Test c·∫£ HTTP v√† HTTPS ƒë·ªÉ x√°c ƒë·ªãnh protocol t·ªët nh·∫•t
  static Future<String> findBestProtocol() async {
    // Removed debug log

    // Test HTTPS tr∆∞·ªõc (∆∞u ti√™n)
    final httpsWorks = await testHttpsConnection();
    if (httpsWorks) {
      // Removed debug log
      return 'https';
    }

    // N·∫øu HTTPS kh√¥ng work, test HTTP
    final httpWorks = await testHttpConnection();
    if (httpWorks) {
      // Removed debug log
      return 'http';
    }

    // Removed debug log
    return 'none';
  }

  /// Test k·∫øt n·ªëi v·ªõi endpoint c·ª• th·ªÉ
  static Future<bool> testEndpoint(String endpoint, {bool useHttps = true}) async {
    try {
      final baseUrl = useHttps ? ApiConfig.httpsUrl : ApiConfig.httpUrl;
      final url = Uri.parse('$baseUrl$endpoint');
      
      print('üîç Testing endpoint: $url');
      
      if (useHttps) {
        final httpClient = HttpClient()
          ..badCertificateCallback = (cert, host, port) {
            return host == 'ckcquizz.ddnsking.com' || host.contains('ddnsking.com');
          }
          ..connectionTimeout = const Duration(seconds: 10);

        final request = await httpClient.getUrl(url);
        final response = await request.close();
        httpClient.close();
        
        print('üì° Response: ${response.statusCode}');
        return response.statusCode < 500; // Accept any non-server error
      } else {
        final response = await http.get(url).timeout(
          const Duration(seconds: 10),
        );
        
        print('üì° Response: ${response.statusCode}');
        return response.statusCode < 500; // Accept any non-server error
      }
    } catch (e) {
      print('‚ùå Endpoint test failed: $e');
      return false;
    }
  }
}
