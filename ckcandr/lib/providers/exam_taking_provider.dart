import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:ckcandr/models/exam_taking_model.dart';
import 'package:ckcandr/services/api_service.dart';
import 'package:ckcandr/providers/user_provider.dart';
import 'package:ckcandr/models/de_thi_model.dart';

/// Provider cho qu·∫£n l√Ω vi·ªác l√†m b√†i thi c·ªßa sinh vi√™n
/// H·ªó tr·ª£ timer, auto-submit, v√† state management chuy√™n nghi·ªáp

/// Notifier cho exam taking
class ExamTakingNotifier extends StateNotifier<ExamTakingState> {
  final ApiService _apiService;
  final Ref _ref;
  Timer? _timer;
  DateTime? _examStartTime;
  int? _resumedKetQuaId; // L∆∞u ketQuaId khi resume session

  ExamTakingNotifier(this._apiService, this._ref) : super(const ExamTakingState());

  /// L∆∞u tr·∫°ng th√°i exam v√†o local storage
  Future<void> _saveExamState() async {
    if (state.exam == null || state.ketQuaId == null) return;

    try {
      final prefs = await SharedPreferences.getInstance();
      final examStateData = {
        'examId': state.exam!.examId,
        'ketQuaId': state.ketQuaId,
        'startTime': state.startTime?.toIso8601String(),
        'currentQuestionIndex': state.currentQuestionIndex,
        'studentAnswers': state.studentAnswers,
        'unfocusCount': 0, // Reset unfocus count on save
      };

      await prefs.setString('exam_state_${state.exam!.examId}', jsonEncode(examStateData));
      debugPrint('üíæ Exam state saved for exam ${state.exam!.examId}');
    } catch (e) {
      debugPrint('‚ùå Error saving exam state: $e');
    }
  }

  /// Kh√¥i ph·ª•c tr·∫°ng th√°i exam t·ª´ local storage (nh∆∞ Vue.js sessionStorage)
  Future<bool> _resumeExamState(int examId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final ketQuaIdKey = 'exam-$examId-ketQuaId';
      final startTimeKey = 'exam-$examId-startTime';

      final storedKetQuaId = prefs.getString(ketQuaIdKey);
      final storedStartTime = prefs.getString(startTimeKey);

      if (storedKetQuaId == null || storedStartTime == null) {
        debugPrint('üîç No saved exam session found for exam $examId');
        return false;
      }

      final ketQuaId = int.tryParse(storedKetQuaId);
      final startTime = DateTime.tryParse(storedStartTime);

      if (ketQuaId == null || startTime == null) {
        debugPrint('‚ùå Invalid saved exam session data');
        return false;
      }

      debugPrint('üîÑ Found saved exam session for exam $examId');
      debugPrint('   KetQuaId: $ketQuaId');
      debugPrint('   StartTime: $startTime');

      // Ki·ªÉm tra exam c√≥ c√≤n trong th·ªùi gian l√†m b√†i kh√¥ng (nh∆∞ Vue.js)
      try {
        final examDetail = await _getExamById(examId);
        if (examDetail != null) {
          final now = DateTime.now();
          final endTime = examDetail.endTime;

          if (endTime != null && now.isAfter(endTime)) {
            debugPrint('‚è∞ Exam time expired, clearing session...');
            await prefs.remove(ketQuaIdKey);
            await prefs.remove(startTimeKey);
            return false;
          }
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è Could not check exam time: $e');
        // Continue anyway for backward compatibility
      }

      // Ki·ªÉm tra s·ªë l·∫ßn vi ph·∫°m t·ª´ API tr∆∞·ªõc khi cho ph√©p ti·∫øp t·ª•c
      try {
        final response = await _apiService.tangSoLanChuyenTab(ketQuaId);
        debugPrint('üìä Current violation count: ${response.soLanHienTai}/${response.gioiHan}');

        if (response.nopBai) {
          debugPrint('üö® Too many violations - exam should be auto-submitted');
          // Clear saved session
          await prefs.remove(ketQuaIdKey);
          await prefs.remove(startTimeKey);
          return false;
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è Could not check violation count: $e');
        // Continue anyway for backward compatibility
      }

      // Store for later use
      _examStartTime = startTime;
      _resumedKetQuaId = ketQuaId;

      return true; // C√≥ state ƒë·ªÉ resume
    } catch (e) {
      debugPrint('‚ùå Error resuming exam state: $e');
      return false;
    }
  }

  /// Load existing answers t·ª´ server (nh∆∞ Vue.js load saved answers)
  Future<Map<int, String>> _loadExistingAnswersFromServer(int ketQuaId) async {
    try {
      debugPrint('üì• Loading existing answers from server for ketQuaId: $ketQuaId');

      // G·ªçi API ƒë·ªÉ l·∫•y existing answers t·ª´ ChiTietTraLoiSinhVien
      final response = await _apiService.getExamDetails(state.exam?.examId ?? 0);

      // Parse existing answers t·ª´ response
      final Map<int, String> existingAnswers = {};

      if (response['questions'] != null) {
        final questions = response['questions'] as List;
        for (final question in questions) {
          final questionId = question['macauhoi'] as int?;
          final selectedAnswerId = question['selectedAnswerId'] as int?;

          if (questionId != null && selectedAnswerId != null) {
            existingAnswers[questionId] = selectedAnswerId.toString();
            debugPrint('üìù Found existing answer: Q$questionId -> A$selectedAnswerId');
          }
        }
      }

      debugPrint('‚úÖ Loaded ${existingAnswers.length} existing answers from server');
      return existingAnswers;
    } catch (e) {
      debugPrint('‚ùå Error loading existing answers: $e');
      return {};
    }
  }

  /// L∆∞u session info (nh∆∞ Vue.js sessionStorage)
  Future<void> _saveSessionInfo(int examId, int ketQuaId, DateTime startTime) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('exam-$examId-ketQuaId', ketQuaId.toString());
      await prefs.setString('exam-$examId-startTime', startTime.toIso8601String());
      debugPrint('üíæ Session info saved for exam $examId');
    } catch (e) {
      debugPrint('‚ùå Error saving session info: $e');
    }
  }

  /// X√≥a session info (nh∆∞ Vue.js sessionStorage.removeItem)
  Future<void> _clearSessionInfo(int examId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('exam-$examId-ketQuaId');
      await prefs.remove('exam-$examId-startTime');
      debugPrint('üóëÔ∏è Session info cleared for exam $examId');
    } catch (e) {
      debugPrint('‚ùå Error clearing session info: $e');
    }
  }

  /// Load existing answers khi resume session (nh∆∞ Vue.js)
  Future<void> _loadExistingAnswers(int ketQuaId) async {
    try {
      debugPrint('üîÑ Loading existing answers for ketQuaId: $ketQuaId');

      // G·ªçi API ƒë·ªÉ l·∫•y answers ƒë√£ save (s·ª≠ d·ª•ng API tr·∫£ v·ªÅ raw data)
      final resultData = await _apiService.getExamResultDetails(ketQuaId);

      if (resultData.isNotEmpty) {
        final questions = resultData['questions'] as List<dynamic>? ?? [];
        final Map<int, String> loadedAnswers = {};

        for (final questionData in questions) {
          final questionId = questionData['macauhoi'] as int;
          final questionType = questionData['loaicauhoi'] as String? ?? 'single_choice';

          if (questionType == 'multiple_choice') {
            // Multiple choice - get selected answer IDs
            final selectedIds = (questionData['studentSelectedAnswerIds'] as List<dynamic>?)
                ?.map((id) => id.toString()).toList() ?? [];
            if (selectedIds.isNotEmpty) {
              loadedAnswers[questionId] = selectedIds.join(',');
            }
          } else if (questionType == 'essay') {
            // Essay - get text answer
            final essayAnswer = questionData['studentAnswerText'] as String? ?? '';
            if (essayAnswer.isNotEmpty) {
              loadedAnswers[questionId] = essayAnswer;
            }
          } else {
            // Single choice - get selected answer ID
            final selectedId = questionData['studentSelectedAnswerId'] as int?;
            if (selectedId != null) {
              loadedAnswers[questionId] = selectedId.toString();
            }
          }
        }

        // Update state with loaded answers
        state = state.copyWith(studentAnswers: loadedAnswers);
        debugPrint('‚úÖ Loaded ${loadedAnswers.length} existing answers');

        // Debug log loaded answers
        loadedAnswers.forEach((questionId, answer) {
          debugPrint('   Question $questionId: $answer');
        });
      } else {
        debugPrint('üìù No existing answers found');
      }
    } catch (e) {
      debugPrint('‚ùå Error loading existing answers: $e');
      // Continue without existing answers
    }
  }

  /// X√≥a tr·∫°ng th√°i exam t·ª´ local storage
  Future<void> _clearExamState(int examId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('exam_state_$examId');
      debugPrint('üóëÔ∏è Exam state cleared for exam $examId');
    } catch (e) {
      debugPrint('‚ùå Error clearing exam state: $e');
    }
  }

  /// b·∫Øt ƒë·∫ßu l√†m b√†i thi - Match Vue.js logic exactly
  Future<void> startExam(int examId) async {
    state = state.copyWith(
      isLoading: true,
      error: null,
      unfocusCount: 0, // Reset unfocus count khi b·∫Øt ƒë·∫ßu thi
      unfocusMessage: null,
    );

    try {
      debugPrint('üöÄ Starting exam with ID: $examId');

      // Check if there's a saved exam state to resume
      final canResume = await _resumeExamState(examId);
      if (canResume) {
        debugPrint('üîÑ Found saved exam state, attempting to resume...');

        // Check if exam was already submitted
        if (_resumedKetQuaId != null) {
          final examDetail = await _apiService.getStudentExamResult(_resumedKetQuaId!);
          if (examDetail != null && examDetail['isSubmitted'] == true) {
            debugPrint('‚úÖ Exam already submitted, loading review mode');
            await _loadSubmittedExamForReview(examId, _resumedKetQuaId!);
            return;
          }
        }
      }

      // Step 1: Start exam ho·∫∑c resume session (nh∆∞ Vue.js)
      int ketQuaId;

      if (canResume && _resumedKetQuaId != null) {
        // Resume existing session
        ketQuaId = _resumedKetQuaId!;
        debugPrint('üîÑ Resuming with existing KetQuaId: $ketQuaId');
        // _examStartTime ƒë√£ ƒë∆∞·ª£c set trong _resumeExamState
      } else {
        // Start new exam session
        final startResponse = await _apiService.startExam(examId);
        if (startResponse.isEmpty) {
          throw Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server khi b·∫Øt ƒë·∫ßu b√†i thi');
        }

        final newKetQuaId = startResponse['ketQuaId'] as int?;
        final thoigianbatdauStr = startResponse['thoigianbatdau'] as String?;

        if (newKetQuaId == null) {
          throw Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ k·∫øt qu·∫£ t·ª´ server');
        }

        ketQuaId = newKetQuaId;

        // Parse start time t·ª´ server
        DateTime? serverStartTime;
        if (thoigianbatdauStr != null) {
          try {
            serverStartTime = DateTime.parse(thoigianbatdauStr);
          } catch (e) {
            debugPrint('‚ö†Ô∏è Could not parse server start time: $thoigianbatdauStr');
          }
        }
        _examStartTime = serverStartTime ?? DateTime.now();

        // Save session info (nh∆∞ Vue.js sessionStorage)
        await _saveSessionInfo(examId, ketQuaId, _examStartTime!);
      }

      debugPrint('‚úÖ Exam session ready. KetQuaId: $ketQuaId, StartTime: $_examStartTime');

      // Step 2: Get exam details - g·ªçi API /Exam/{examId} nh∆∞ Vue.js
      final examDetailsResponse = await _apiService.getExamDetails(examId);
      if (examDetailsResponse.isEmpty) {
        throw Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server khi l·∫•y chi ti·∫øt ƒë·ªÅ thi');
      }

      // Parse exam data t·ª´ response
      final examData = _parseExamData(examDetailsResponse, examId);
      final questions = _parseQuestions(examDetailsResponse);

      if (questions.isEmpty) {
        throw Exception('ƒê·ªÅ thi kh√¥ng c√≥ c√¢u h·ªèi');
      }

      // Step 3: Load existing answers n·∫øu resume (nh∆∞ Vue.js load saved answers)
      Map<int, String> existingAnswers = {};
      if (canResume && _resumedKetQuaId != null) {
        debugPrint('üîÑ Loading existing answers for resumed exam...');
        existingAnswers = await _loadExistingAnswersFromServer(ketQuaId);
        debugPrint('‚úÖ Loaded ${existingAnswers.length} existing answers');
      }

      // kh·ªüi t·∫°o state v·ªõi d·ªØ li·ªáu c∆° b·∫£n t·ª´ server
      state = state.copyWith(
        exam: examData,
        questions: questions,
        currentQuestionIndex: 0,
        studentAnswers: existingAnswers, // Load existing answers n·∫øu resume
        startTime: _examStartTime,
        timeRemaining: null, // S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n trong _calculateExamEndTime
        isLoading: false,
        ketQuaId: ketQuaId, // l∆∞u ketQuaId ƒë·ªÉ d√πng cho update answer v√† submit
      );

      // Load existing answers n·∫øu resume session (nh∆∞ Vue.js)
      if (canResume) {
        await _loadExistingAnswers(ketQuaId);
      }

      // T√≠nh to√°n th·ªùi gian k·∫øt th√∫c th√¥ng minh v√† start timer
      await _calculateExamEndTime();

      debugPrint('‚úÖ Exam initialized: ${examData.examName} with ${questions.length} questions');
    } catch (e) {
      debugPrint('‚ùå Error starting exam: $e');
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }

  /// b·∫Øt ƒë·∫ßu timer ƒë·∫øm ng∆∞·ª£c - C·∫≠p nh·∫≠t theo ph√∫t th·ª±c t·∫ø nh∆∞ Vue.js
  void _startTimer() {
    _timer?.cancel();

    // Log th√¥ng tin ban ƒë·∫ßu
    if (state.exam?.endTime != null) {
      final examEndTimeLocal = TimezoneHelper.toLocal(state.exam!.endTime!);
      final now = TimezoneHelper.nowInVietnam();
      debugPrint('‚è∞ Timer started:');
      debugPrint('   Current time (GMT+7): $now');
      debugPrint('   Exam end time (GMT+7): $examEndTimeLocal');
      debugPrint('   Time until exam ends: ${examEndTimeLocal.difference(now)}');
    }

    // Timer ch√≠nh ch·∫°y m·ªói gi√¢y ƒë·ªÉ ki·ªÉm tra exam end time (critical)
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      // Force check exam end time every tick - CRITICAL
      if (!_checkExamEndTime()) {
        return; // Exam ended, timer cancelled
      }

      // Ki·ªÉm tra h·∫øt th·ªùi gian l√†m b√†i (duration countdown) - PRIORITY 2
      if (state.timeRemaining != null && state.timeRemaining!.inSeconds > 0) {
        final newTimeRemaining = Duration(seconds: state.timeRemaining!.inSeconds - 1);
        state = state.copyWith(timeRemaining: newTimeRemaining);

        // c·∫£nh b√°o khi c√≤n 5 ph√∫t
        if (newTimeRemaining.inMinutes == 5 && newTimeRemaining.inSeconds == 0) {
          _showTimeWarning();
        }

        // c·∫£nh b√°o khi c√≤n 1 ph√∫t
        if (newTimeRemaining.inMinutes == 1 && newTimeRemaining.inSeconds == 0) {
          _showTimeWarning();
        }
      } else if (state.timeRemaining != null) {
        // h·∫øt th·ªùi gian l√†m b√†i, auto submit
        debugPrint('‚è∞ Exam duration ended, force submitting...');
        _autoSubmitExam(reason: 'H·∫øt th·ªùi gian l√†m b√†i');
      }
    });

    // Timer ph·ª• ƒë·ªÉ c·∫≠p nh·∫≠t UI theo ph√∫t th·ª±c t·∫ø (nh∆∞ Vue.js)
    _startMinuteTimer();
  }

  /// Timer ph·ª• ƒë·ªÉ c·∫≠p nh·∫≠t UI theo ph√∫t th·ª±c t·∫ø (nh∆∞ Vue.js)
  Timer? _minuteTimer;

  void _startMinuteTimer() {
    _minuteTimer?.cancel();

    // T√≠nh to√°n th·ªùi gian ƒë·∫øn ph√∫t ti·∫øp theo
    final now = DateTime.now();
    final secondsToNextMinute = 60 - now.second;

    // ƒê·ª£i ƒë·∫øn ph√∫t ti·∫øp theo, sau ƒë√≥ ch·∫°y timer m·ªói ph√∫t
    Timer(Duration(seconds: secondsToNextMinute), () {
      _updateTimeDisplay(); // C·∫≠p nh·∫≠t l·∫ßn ƒë·∫ßu

      // Sau ƒë√≥ c·∫≠p nh·∫≠t m·ªói ph√∫t
      _minuteTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
        _updateTimeDisplay();
      });
    });
  }

  /// C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian theo ph√∫t th·ª±c t·∫ø
  void _updateTimeDisplay() {
    if (state.timeRemaining != null) {
      // Force rebuild UI ƒë·ªÉ c·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian
      state = state.copyWith(timeRemaining: state.timeRemaining);
      debugPrint('‚è∞ Minute timer update: ${state.timeRemaining?.inMinutes} minutes remaining');
    }
  }

  /// c·∫£nh b√°o th·ªùi gian
  void _showTimeWarning() {
    final minutes = state.timeRemaining?.inMinutes ?? 0;
    debugPrint('‚ö†Ô∏è Time warning: $minutes minutes remaining');
    // c√≥ th·ªÉ emit event ƒë·ªÉ UI hi·ªÉn th·ªã warning
  }

  /// Ki·ªÉm tra th·ªùi gian k·∫øt th√∫c exam - return false n·∫øu ƒë√£ h·∫øt th·ªùi gian
  bool _checkExamEndTime() {
    if (state.exam?.endTime == null) return true; // Kh√¥ng c√≥ end time, ti·∫øp t·ª•c

    final now = TimezoneHelper.nowInVietnam();
    final examEndTimeLocal = TimezoneHelper.toLocal(state.exam!.endTime!);

    // Debug log m·ªói 5 gi√¢y
    if (DateTime.now().second % 5 == 0) {
      debugPrint('‚è∞ Exam end time check:');
      debugPrint('   Current time (GMT+7): $now');
      debugPrint('   Exam end time (GMT+7): $examEndTimeLocal');
      debugPrint('   Time remaining: ${examEndTimeLocal.difference(now)}');
      debugPrint('   Is expired: ${now.isAfter(examEndTimeLocal)}');
    }

    if (now.isAfter(examEndTimeLocal) || now.isAtSameMomentAs(examEndTimeLocal)) {
      debugPrint('üö® EXAM PERIOD ENDED - Auto submitting NOW!');
      debugPrint('   Current: $now');
      debugPrint('   End time: $examEndTimeLocal');
      debugPrint('   Diff (ms): ${now.millisecondsSinceEpoch - examEndTimeLocal.millisecondsSinceEpoch}');

      _autoSubmitExam(reason: 'H·∫øt th·ªùi gian di·ªÖn ra b√†i thi');
      return false; // Exam ended
    }

    return true; // Exam still ongoing
  }

  /// auto submit khi h·∫øt th·ªùi gian
  Future<void> _autoSubmitExam({String? reason}) async {
    _timer?.cancel();
    debugPrint('‚è∞ Auto submitting exam: ${reason ?? "timeout"}');
    await submitExam(isAutoSubmit: true, autoSubmitReason: reason);
  }

  /// Parse exam data t·ª´ API response
  ExamForStudent _parseExamData(Map<String, dynamic> response, int examId) {
    // Debug log raw data
    debugPrint('üîç Parsing exam data:');
    debugPrint('   Full response: $response');

    // API /Exam/{id} kh√¥ng tr·∫£ v·ªÅ start/end time, c·∫ßn l·∫•y t·ª´ my-exams ƒë·ªÉ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß
    // T·∫°m th·ªùi return basic data, s·∫Ω ƒë∆∞·ª£c update trong _calculateExamEndTime
    return ExamForStudent(
      examId: examId,
      examName: response['tende'] as String?,
      subjectName: response['tenMonHoc'] as String?,
      duration: response['thoigianthi'] as int?,
      startTime: null, // S·∫Ω ƒë∆∞·ª£c set trong _calculateExamEndTime
      endTime: null, // S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n trong _calculateExamEndTime
      totalQuestions: response['tongSoCau'] as int? ?? 0,
      status: 'DangDienRa',
      resultId: null,
    );
  }

  /// T√≠nh to√°n th·ªùi gian k·∫øt th√∫c b√†i thi th√¥ng minh
  /// Logic: Ch·ªçn th·ªùi gian n√†o ƒë·∫øn tr∆∞·ªõc gi·ªØa:
  /// 1. Th·ªùi gian k·∫øt th√∫c l·ªãch thi (endTime t·ª´ gi√°o vi√™n)
  /// 2. Th·ªùi gian b·∫Øt ƒë·∫ßu + duration (th·ªùi gian cho ph√©p l√†m b√†i)
  Future<void> _calculateExamEndTime() async {
    if (state.exam == null) return;

    try {
      // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ my-exams
      final exams = await _apiService.getMyExams();
      final examInfo = exams.firstWhere(
        (exam) => exam.examId == state.exam!.examId,
        orElse: () => throw Exception('Exam not found in my-exams'),
      );

      final now = TimezoneHelper.nowInVietnam();
      final startTime = _examStartTime ?? now; // Th·ªùi gian b·∫Øt ƒë·∫ßu l√†m b√†i

      // Th·ªùi gian k·∫øt th√∫c theo l·ªãch thi (t·ª´ gi√°o vi√™n)
      DateTime? scheduleEndTime;
      if (examInfo.endTime != null) {
        scheduleEndTime = TimezoneHelper.toLocal(examInfo.endTime!);
      }

      // Th·ªùi gian k·∫øt th√∫c theo duration (th·ªùi gian cho ph√©p l√†m b√†i)
      DateTime? durationEndTime;
      if (state.exam!.duration != null) {
        durationEndTime = startTime.add(Duration(minutes: state.exam!.duration!));
      }

      debugPrint('üßÆ Calculating exam end time:');
      debugPrint('   Start time: $startTime');
      debugPrint('   Schedule end time: $scheduleEndTime');
      debugPrint('   Duration end time: $durationEndTime');

      // Ch·ªçn th·ªùi gian n√†o ƒë·∫øn tr∆∞·ªõc
      DateTime finalEndTime;
      String endTimeReason;

      if (scheduleEndTime != null && durationEndTime != null) {
        if (scheduleEndTime.isBefore(durationEndTime)) {
          finalEndTime = scheduleEndTime;
          endTimeReason = 'schedule end time (earlier than duration)';
        } else {
          finalEndTime = durationEndTime;
          endTimeReason = 'duration end time (earlier than schedule)';
        }
      } else if (scheduleEndTime != null) {
        finalEndTime = scheduleEndTime;
        endTimeReason = 'schedule end time (no duration)';
      } else if (durationEndTime != null) {
        finalEndTime = durationEndTime;
        endTimeReason = 'duration end time (no schedule)';
      } else {
        // Fallback: 1 gi·ªù t·ª´ b√¢y gi·ªù
        finalEndTime = now.add(const Duration(hours: 1));
        endTimeReason = 'fallback (1 hour from now)';
      }

      debugPrint('   Final end time: $finalEndTime ($endTimeReason)');

      // Update exam v·ªõi th·ªùi gian ƒë√£ t√≠nh to√°n
      final updatedExam = ExamForStudent(
        examId: state.exam!.examId,
        examName: state.exam!.examName,
        subjectName: state.exam!.subjectName,
        duration: state.exam!.duration,
        startTime: TimezoneHelper.toUtc(startTime),
        endTime: TimezoneHelper.toUtc(finalEndTime),
        totalQuestions: state.exam!.totalQuestions,
        status: state.exam!.status,
        resultId: state.exam!.resultId,
      );

      // T√≠nh to√°n th·ªùi gian c√≤n l·∫°i
      Duration? timeRemaining;

      if (finalEndTime.isAfter(now)) {
        timeRemaining = finalEndTime.difference(now);
        debugPrint('   Time remaining: $timeRemaining');
      } else {
        timeRemaining = Duration.zero;
        debugPrint('   ‚ö†Ô∏è Exam time already expired!');
      }

      // Update state v·ªõi exam ƒë√£ c√≥ th·ªùi gian v√† time remaining
      state = state.copyWith(
        exam: updatedExam,
        timeRemaining: timeRemaining,
      );

      // Ki·ªÉm tra ngay xem c√≥ h·∫øt th·ªùi gian ch∆∞a
      if (timeRemaining.inSeconds <= 0) {
        debugPrint('‚è∞ Exam time expired immediately - auto submitting');
        _autoSubmitExam(reason: 'H·∫øt th·ªùi gian di·ªÖn ra b√†i thi');
        return;
      }

      // Start timer v·ªõi th·ªùi gian ƒë√£ t√≠nh to√°n
      _startTimer();

    } catch (e) {
      debugPrint('‚ùå Error calculating exam end time: $e');
      // Fallback: s·ª≠ d·ª•ng duration ho·∫∑c 1 gi·ªù
      final now = TimezoneHelper.nowInVietnam();
      final fallbackDuration = state.exam!.duration ?? 60; // 60 ph√∫t m·∫∑c ƒë·ªãnh
      final fallbackEndTime = now.add(Duration(minutes: fallbackDuration));

      final updatedExam = ExamForStudent(
        examId: state.exam!.examId,
        examName: state.exam!.examName,
        subjectName: state.exam!.subjectName,
        duration: state.exam!.duration,
        startTime: TimezoneHelper.toUtc(now),
        endTime: TimezoneHelper.toUtc(fallbackEndTime),
        totalQuestions: state.exam!.totalQuestions,
        status: state.exam!.status,
        resultId: state.exam!.resultId,
      );

      final timeRemaining = fallbackEndTime.difference(now);

      state = state.copyWith(
        exam: updatedExam,
        timeRemaining: timeRemaining,
      );

      _startTimer();
    }
  }

  /// Parse questions t·ª´ API response
  List<ExamQuestion> _parseQuestions(Map<String, dynamic> response) {
    final questionsData = response['questions'] as List<dynamic>? ?? [];
    return questionsData.map((q) => ExamQuestion.fromJson(q as Map<String, dynamic>)).toList();
  }

  // Map ƒë·ªÉ l∆∞u tr·ªØ c√¢u tr·∫£ l·ªùi ch∆∞a ƒë∆∞·ª£c l∆∞u
  final Map<int, Map<String, dynamic>> _pendingAnswers = {};

  /// Ch·ªçn ƒë√°p √°n cho c√¢u h·ªèi v√† l∆∞u realtime (nh∆∞ Vue.js)
  void selectAnswer(int questionId, String answerId) {
    // Ki·ªÉm tra exam end time tr∆∞·ªõc khi cho ph√©p select answer
    if (!_checkExamEndTime()) {
      return; // Exam ƒë√£ h·∫øt th·ªùi gian, kh√¥ng cho ph√©p select
    }

    final newAnswers = Map<int, String>.from(state.studentAnswers);
    newAnswers[questionId] = answerId;

    // C·∫≠p nh·∫≠t local state ngay l·∫≠p t·ª©c
    state = state.copyWith(studentAnswers: newAnswers);

    debugPrint('üìù Selected answer $answerId for question $questionId - saving realtime...');

    // L∆∞u state sau khi update answer
    _saveExamState();

    // Realtime save ngay l·∫≠p t·ª©c (nh∆∞ Vue.js)
    _saveAnswerRealtime(questionId, answerId);
  }

  /// L∆∞u c√¢u tr·∫£ l·ªùi realtime ngay l·∫≠p t·ª©c (nh∆∞ Vue.js)
  Future<void> _saveAnswerRealtime(int questionId, String answerId) async {
    if (state.ketQuaId == null) {
      debugPrint('‚ùå Cannot save answer: ketQuaId is null');
      return;
    }

    // Set saving state
    state = state.copyWith(isSaving: true);

    try {
      final question = state.questions.firstWhere((q) => q.questionId == questionId);

      if (question.questionType == 'essay') {
        // C√¢u t·ª± lu·∫≠n - g·ª≠i text
        await _apiService.updateExamAnswer(
          ketQuaId: state.ketQuaId!,
          macauhoi: questionId,
          dapantuluansv: answerId,
        );
        debugPrint('‚úÖ Essay answer saved for question $questionId');
      } else if (question.questionType == 'multiple_choice') {
        // C√¢u nhi·ªÅu ƒë√°p √°n - x·ª≠ l√Ω t·ª´ng ƒë√°p √°n
        await _saveMultipleChoiceAnswerRealtime(questionId, answerId);
        debugPrint('‚úÖ Multiple choice answer saved for question $questionId');
      } else {
        // C√¢u ƒë∆°n - g·ª≠i ƒë√°p √°n ƒë√£ ch·ªçn
        await _apiService.updateExamAnswer(
          ketQuaId: state.ketQuaId!,
          macauhoi: questionId,
          macautl: int.parse(answerId),
          dapansv: 1,
        );
        debugPrint('‚úÖ Single choice answer saved for question $questionId');
      }
    } catch (e) {
      debugPrint('‚ùå Error saving answer realtime: $e');
      // Kh√¥ng hi·ªÉn th·ªã error cho user ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n tr·∫£i nghi·ªám
    } finally {
      // Clear saving state
      state = state.copyWith(isSaving: false);
    }
  }

  /// L∆∞u c√¢u tr·∫£ l·ªùi multiple choice realtime
  Future<void> _saveMultipleChoiceAnswerRealtime(int questionId, String selectedAnswers) async {
    final question = state.questions.firstWhere((q) => q.questionId == questionId);
    final selectedIds = selectedAnswers.split(',').where((id) => id.isNotEmpty).toList();

    // G·ª≠i t·ª´ng ƒë√°p √°n
    for (final answer in question.answers) {
      final isSelected = selectedIds.contains(answer.answerId.toString());
      await _apiService.updateExamAnswer(
        ketQuaId: state.ketQuaId!,
        macauhoi: questionId,
        macautl: answer.answerId,
        dapansv: isSelected ? 1 : 0,
      );
    }
  }

  /// L∆∞u c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i l√™n server (legacy method)
  Future<void> saveCurrentAnswer() async {
    if (state.ketQuaId == null || _pendingAnswers.isEmpty) return;

    final currentQuestionId = state.questions[state.currentQuestionIndex].questionId;
    final pendingAnswer = _pendingAnswers[currentQuestionId];

    if (pendingAnswer == null) return;

    // Set saving state
    state = state.copyWith(isSaving: true);

    try {
      debugPrint('üíæ Saving answer for question $currentQuestionId to server...');

      final questionType = pendingAnswer['questionType'] as String;
      final answerId = pendingAnswer['answerId'] as String;

      if (questionType == 'essay') {
        // C√¢u t·ª± lu·∫≠n - g·ª≠i text
        await _apiService.updateExamAnswer(
          ketQuaId: state.ketQuaId!,
          macauhoi: currentQuestionId,
          dapantuluansv: answerId,
        );
      } else if (questionType == 'multiple_choice') {
        // C√¢u nhi·ªÅu ƒë√°p √°n - x·ª≠ l√Ω t·ª´ng ƒë√°p √°n
        await _saveMultipleChoiceAnswer(currentQuestionId, answerId);
      } else {
        // C√¢u m·ªôt ƒë√°p √°n - g·ª≠i ID ƒë√°p √°n
        await _apiService.updateExamAnswer(
          ketQuaId: state.ketQuaId!,
          macauhoi: currentQuestionId,
          macautl: int.parse(answerId),
        );
      }

      // X√≥a kh·ªèi pending sau khi l∆∞u th√†nh c√¥ng
      _pendingAnswers.remove(currentQuestionId);
      debugPrint('‚úÖ Answer saved successfully for question $currentQuestionId');

    } catch (e) {
      debugPrint('‚ùå Error saving answer to server: $e');
      // Gi·ªØ l·∫°i trong pending ƒë·ªÉ th·ª≠ l·∫°i sau
    } finally {
      // Clear saving state
      state = state.copyWith(isSaving: false);
    }
  }

  /// X·ª≠ l√Ω l∆∞u c√¢u tr·∫£ l·ªùi nhi·ªÅu ƒë√°p √°n
  Future<void> _saveMultipleChoiceAnswer(int questionId, String selectedAnswerIds) async {
    final question = state.questions.firstWhere((q) => q.questionId == questionId);
    final selectedIds = selectedAnswerIds.split(',').where((id) => id.isNotEmpty).map(int.parse).toSet();

    // L∆∞u t·ª´ng ƒë√°p √°n (set dapansv = 1 cho ƒë√£ ch·ªçn, 0 cho ch∆∞a ch·ªçn)
    for (final answer in question.answers) {
      final isSelected = selectedIds.contains(answer.answerId);
      await _apiService.updateExamAnswer(
        ketQuaId: state.ketQuaId!,
        macauhoi: questionId,
        macautl: answer.answerId,
        dapansv: isSelected ? 1 : 0,
      );
    }
  }

  /// L∆∞u t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi pending
  Future<void> _saveAllPendingAnswers() async {
    if (state.ketQuaId == null || _pendingAnswers.isEmpty) return;

    debugPrint('üíæ Saving ${_pendingAnswers.length} pending answers...');

    final List<Future<void>> saveTasks = [];

    for (final entry in _pendingAnswers.entries) {
      final questionId = entry.key;
      final pendingAnswer = entry.value;

      saveTasks.add(_savePendingAnswer(questionId, pendingAnswer));
    }

    // L∆∞u t·∫•t c·∫£ ƒë·ªìng th·ªùi
    await Future.wait(saveTasks);

    // X√≥a t·∫•t c·∫£ pending sau khi l∆∞u
    _pendingAnswers.clear();
    debugPrint('‚úÖ All pending answers saved');
  }

  /// L∆∞u m·ªôt c√¢u tr·∫£ l·ªùi pending c·ª• th·ªÉ
  Future<void> _savePendingAnswer(int questionId, Map<String, dynamic> pendingAnswer) async {
    try {
      final questionType = pendingAnswer['questionType'] as String;
      final answerId = pendingAnswer['answerId'] as String;

      if (questionType == 'essay') {
        await _apiService.updateExamAnswer(
          ketQuaId: state.ketQuaId!,
          macauhoi: questionId,
          dapantuluansv: answerId,
        );
      } else if (questionType == 'multiple_choice') {
        await _saveMultipleChoiceAnswer(questionId, answerId);
      } else {
        await _apiService.updateExamAnswer(
          ketQuaId: state.ketQuaId!,
          macauhoi: questionId,
          macautl: int.parse(answerId),
        );
      }
    } catch (e) {
      debugPrint('‚ùå Error saving pending answer for question $questionId: $e');
      rethrow; // Re-throw ƒë·ªÉ Future.wait c√≥ th·ªÉ catch
    }
  }

  /// chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ti·∫øp theo
  Future<void> nextQuestion() async {
    // L∆∞u c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i tr∆∞·ªõc khi chuy·ªÉn
    await saveCurrentAnswer();

    if (state.currentQuestionIndex < state.questions.length - 1) {
      state = state.copyWith(
        currentQuestionIndex: state.currentQuestionIndex + 1,
      );
    }
  }

  /// quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc
  Future<void> previousQuestion() async {
    // L∆∞u c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i tr∆∞·ªõc khi chuy·ªÉn
    await saveCurrentAnswer();

    if (state.currentQuestionIndex > 0) {
      state = state.copyWith(
        currentQuestionIndex: state.currentQuestionIndex - 1,
      );
    }
  }

  /// chuy·ªÉn ƒë·∫øn c√¢u h·ªèi c·ª• th·ªÉ
  Future<void> goToQuestion(int index) async {
    // L∆∞u c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i tr∆∞·ªõc khi chuy·ªÉn
    await saveCurrentAnswer();

    if (index >= 0 && index < state.questions.length) {
      state = state.copyWith(currentQuestionIndex: index);
    }
  }

  /// submit b√†i thi
  Future<void> submitExam({bool isAutoSubmit = false, String? autoSubmitReason}) async {
    if (state.isSubmitting) return;

    state = state.copyWith(isSubmitting: true, error: null);

    try {
      final currentUser = _ref.read(currentUserProvider);
      if (currentUser?.id == null) {
        throw Exception('User not authenticated');
      }

      if (state.exam == null || state.startTime == null) {
        throw Exception('Invalid exam state');
      }

      debugPrint('üîÑ Submitting exam...');

      // L∆∞u t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi pending tr∆∞·ªõc khi submit
      await _saveAllPendingAnswers();

      // submit exam v·ªõi API m·ªõi nh∆∞ Vue.js
      if (state.ketQuaId == null) {
        throw Exception('Missing ketQuaId - cannot submit exam');
      }

      // t√≠nh th·ªùi gian l√†m b√†i nh∆∞ Vue.js
      final endTime = DateTime.now();
      final thoiGianLamBai = endTime.difference(state.startTime!).inSeconds;

      debugPrint('   StartTime: ${state.startTime}');
      debugPrint('   EndTime: $endTime');
      debugPrint('   Duration: $thoiGianLamBai seconds');
      debugPrint('   KetQuaId: ${state.ketQuaId}');

      final result = await _apiService.submitExam(
        ketQuaId: state.ketQuaId!,
        examId: state.exam!.examId,
        thoiGianLamBai: thoiGianLamBai,
      );

      // t·∫°o ExamResult t·ª´ response
      final user = _ref.read(currentUserProvider);
      final completedAt = DateTime.now();

      // Server tr·∫£ v·ªÅ format: {KetQuaId, DiemThi, SoCauDung, TongSoCau}
      final examResult = ExamResult(
        resultId: result['ketQuaId'] ?? state.ketQuaId!,
        examId: state.exam!.examId,
        studentId: user?.id ?? '',
        score: (result['diemThi'] ?? 0.0).toDouble(),
        correctAnswers: result['soCauDung'] ?? 0,
        totalQuestions: result['tongSoCau'] ?? state.questions.length,
        startTime: state.startTime!,
        endTime: endTime,
        completedTime: completedAt,
      );

      // c·∫≠p nh·∫≠t state v·ªõi k·∫øt qu·∫£
      _timer?.cancel();
      state = state.copyWith(
        isSubmitting: false,
        error: null, // clear any previous errors
        result: examResult, // l∆∞u k·∫øt qu·∫£ v√†o state
        autoSubmitReason: isAutoSubmit ? autoSubmitReason : null, // l∆∞u l√Ω do auto submit
      );

      debugPrint('‚úÖ Exam submitted successfully!');
      debugPrint('   Result: $result');
      debugPrint('   ExamResult: ${examResult.toString()}');

      // Clear saved exam state and session info after successful submission (nh∆∞ Vue.js)
      if (state.exam?.examId != null) {
        await _clearExamState(state.exam!.examId);
        await _clearSessionInfo(state.exam!.examId);
      }
    } catch (e) {
      debugPrint('‚ùå Error submitting exam: $e');
      _timer?.cancel(); // stop timer on error too
      state = state.copyWith(
        isSubmitting: false,
        error: 'L·ªói n·ªôp b√†i: ${e.toString()}',
      );

      // Rethrow ƒë·ªÉ UI c√≥ th·ªÉ handle
      rethrow;
    }
  }

  /// l·∫•y th√¥ng tin ƒë·ªÅ thi theo ID
  Future<ExamForStudent?> _getExamById(int examId) async {
    try {
      // l·∫•y t·∫•t c·∫£ ƒë·ªÅ thi c·ªßa sinh vi√™n v√† t√¨m theo ID
      final exams = await _apiService.getMyExams();
      return exams.firstWhere(
        (exam) => exam.examId == examId,
        orElse: () => throw Exception('Exam not found'),
      );
    } catch (e) {
      debugPrint('‚ùå Error getting exam by ID: $e');
      return null;
    }
  }

  /// Increment unfocus count - CLIENT-SIDE AUTO SUBMIT
  Future<bool> incrementUnfocusCount() async {
    if (state.ketQuaId == null) {
      debugPrint('‚ùå Kh√¥ng c√≥ ketQuaId ƒë·ªÉ g·ª≠i unfocus');
      return false;
    }

    // CLIENT-SIDE: Increment ngay l·∫≠p t·ª©c
    final newCount = state.unfocusCount + 1;
    debugPrint('üì± CLIENT UNFOCUS: ${state.unfocusCount} ‚Üí $newCount');

    // Update state ngay l·∫≠p t·ª©c
    state = state.copyWith(
      unfocusCount: newCount,
      unfocusMessage: 'B·∫°n ƒë√£ tho√°t ·ª©ng d·ª•ng $newCount/5 l·∫ßn. Vui l√≤ng kh√¥ng tho√°t ·ª©ng d·ª•ng ƒë·ªÉ tr√°nh vi ph·∫°m.',
    );

    debugPrint('‚úÖ State updated - unfocusCount: ${state.unfocusCount}');

    // CLIENT-SIDE AUTO SUBMIT sau 5 l·∫ßn
    if (newCount >= 5) {
      debugPrint('üö® CLIENT AUTO SUBMIT - ƒê√£ tho√°t $newCount l·∫ßn!');

      // N·ªôp b√†i ngay l·∫≠p t·ª©c
      await submitExam(
        isAutoSubmit: true,
        autoSubmitReason: 'T·ª± ƒë·ªông n·ªôp b√†i do tho√°t ·ª©ng d·ª•ng qu√° 5 l·∫ßn ($newCount/5)'
      );

      return true; // ƒê√£ auto submit
    }

    // Background sync v·ªõi server (kh√¥ng ch·ªù)
    _syncWithServerInBackground();

    debugPrint('‚úÖ Client unfocus count: $newCount/5');
    return false; // Ch∆∞a auto submit
  }

  /// Background sync v·ªõi server (kh√¥ng ·∫£nh h∆∞·ªüng client logic)
  void _syncWithServerInBackground() async {
    if (state.ketQuaId == null) return;

    try {
      debugPrint('üîÑ Background sync v·ªõi server...');
      await _apiService.tangSoLanChuyenTab(state.ketQuaId!);
      debugPrint('‚úÖ Background sync th√†nh c√¥ng');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Background sync failed: $e');
      // Kh√¥ng ·∫£nh h∆∞·ªüng client logic
    }
  }



  /// Load submitted exam for review mode (khi user ƒë√£ n·ªôp b√†i)
  Future<void> _loadSubmittedExamForReview(int examId, int ketQuaId) async {
    try {
      debugPrint('üìñ Loading submitted exam for review...');

      // Get exam details
      final examDetailsResponse = await _apiService.getExamDetails(examId);
      final examData = _parseExamData(examDetailsResponse, examId);
      final questions = _parseQuestions(examDetailsResponse);

      // Get submitted answers from server
      final examResult = await _apiService.getStudentExamResult(ketQuaId);
      Map<int, String> submittedAnswers = {};

      if (examResult != null && examResult['answers'] != null) {
        final answers = examResult['answers'] as List;
        for (final answer in answers) {
          final questionId = answer['questionId'] as int?;
          final selectedAnswer = answer['selectedAnswer'] as String?;
          if (questionId != null && selectedAnswer != null) {
            submittedAnswers[questionId] = selectedAnswer;
          }
        }
      }

      // Set state for review mode
      state = state.copyWith(
        exam: examData,
        questions: questions,
        studentAnswers: submittedAnswers,
        ketQuaId: ketQuaId,
        isLoading: false,
        isSubmitted: true, // Review mode
        currentQuestionIndex: 0,
        timeRemaining: Duration.zero, // No time remaining
      );

      debugPrint('‚úÖ Submitted exam loaded for review: ${submittedAnswers.length} answers');
    } catch (e) {
      debugPrint('‚ùå Error loading submitted exam: $e');
      state = state.copyWith(
        isLoading: false,
        error: 'Kh√¥ng th·ªÉ t·∫£i b√†i l√†m ƒë√£ n·ªôp: $e',
      );
    }
  }

  /// L·∫•y unfocus count hi·ªán t·∫°i (public method) - S·ª¨A: Tr·∫£ v·ªÅ t·ª´ state thay v√¨ local storage
  Future<int> getCurrentUnfocusCount() async {
    return state.unfocusCount;
  }

  /// Force refresh unfocus count t·ª´ server (debug purpose)
  Future<void> refreshUnfocusCountFromServer() async {
    if (state.ketQuaId == null) {
      debugPrint('‚ùå Kh√¥ng c√≥ ketQuaId ƒë·ªÉ refresh unfocus count');
      return;
    }

    try {
      debugPrint('üîÑ Refreshing unfocus count from server...');

      // G·ªçi API ƒë·ªÉ l·∫•y current count (kh√¥ng increment)
      // TODO: Implement API to get current count without incrementing
      // For now, we rely on the state from previous API calls

      debugPrint('‚úÖ Current unfocus count: ${state.unfocusCount}');
    } catch (e) {
      debugPrint('‚ùå Error refreshing unfocus count: $e');
    }
  }

  /// reset state
  void reset() {
    _timer?.cancel();
    _minuteTimer?.cancel();
    state = const ExamTakingState();
  }

  /// clear error state
  void clearError() {
    state = state.copyWith(error: null);
  }

  /// pause timer (n·∫øu c·∫ßn)
  void pauseTimer() {
    _timer?.cancel();
  }

  /// resume timer (n·∫øu c·∫ßn)
  void resumeTimer() {
    if (state.timeRemaining != null && state.timeRemaining!.inSeconds > 0) {
      _startTimer();
    }
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }
}

/// Provider ch√≠nh cho exam taking
final examTakingProvider = StateNotifierProvider<ExamTakingNotifier, ExamTakingState>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  return ExamTakingNotifier(apiService, ref);
});

/// Provider cho c√¢u h·ªèi hi·ªán t·∫°i
final currentQuestionProvider = Provider<ExamQuestion?>((ref) {
  final state = ref.watch(examTakingProvider);
  if (state.questions.isEmpty || state.currentQuestionIndex >= state.questions.length) {
    return null;
  }
  return state.questions[state.currentQuestionIndex];
});

/// Provider cho ƒë√°p √°n ƒë√£ ch·ªçn c·ªßa c√¢u hi·ªán t·∫°i
final currentQuestionAnswerProvider = Provider<String?>((ref) {
  final state = ref.watch(examTakingProvider);
  final currentQuestion = ref.watch(currentQuestionProvider);
  if (currentQuestion == null) return null;
  
  return state.studentAnswers[currentQuestion.questionId];
});

/// Provider cho ti·∫øn ƒë·ªô l√†m b√†i
final examProgressProvider = Provider<double>((ref) {
  final state = ref.watch(examTakingProvider);
  return state.progress;
});

/// Provider cho th·ªùi gian c√≤n l·∫°i (formatted)
final timeRemainingFormattedProvider = Provider<String>((ref) {
  final state = ref.watch(examTakingProvider);
  if (state.timeRemaining == null) return '--:--';
  
  final duration = state.timeRemaining!;
  final hours = duration.inHours;
  final minutes = duration.inMinutes % 60;
  final seconds = duration.inSeconds % 60;
  
  if (hours > 0) {
    return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  } else {
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }
});

/// Provider cho vi·ªác ki·ªÉm tra c√≥ th·ªÉ submit kh√¥ng
final canSubmitExamProvider = Provider<bool>((ref) {
  final state = ref.watch(examTakingProvider);
  return state.canSubmit;
});

/// Provider cho danh s√°ch ƒë·ªÅ thi c·ªßa sinh vi√™n
final studentExamsProvider = FutureProvider<List<ExamForStudent>>((ref) async {
  final apiService = ref.watch(apiServiceProvider);
  return await apiService.getMyExams();
});

/// Provider cho ƒë·ªÅ thi c·ªßa l·ªõp h·ªçc c·ª• th·ªÉ
final classExamsProvider = FutureProvider.family<List<ExamForStudent>, int>((ref, classId) async {
  final apiService = ref.watch(apiServiceProvider);
  return await apiService.getStudentExamsForClass(classId);
});
