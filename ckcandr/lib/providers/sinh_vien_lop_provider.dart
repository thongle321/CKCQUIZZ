/// Provider ƒë·ªÉ qu·∫£n l√Ω danh s√°ch l·ªõp h·ªçc (nh√≥m h·ªçc ph·∫ßn) m√† sinh vi√™n ƒë√£ tham gia
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/models/lop_hoc_model.dart';
import 'package:ckcandr/services/sinh_vien_lop_service.dart';
import 'package:ckcandr/services/api_service.dart';
import 'package:ckcandr/providers/user_provider.dart';
import 'package:flutter/foundation.dart';

// Provider cho SinhVienLopService
final sinhVienLopServiceProvider = Provider<SinhVienLopService>((ref) {
  final apiService = ref.watch(apiServiceProvider);
  return SinhVienLopService(apiService);
});

// Provider cho danh s√°ch l·ªõp h·ªçc m√† sinh vi√™n ƒë√£ tham gia (s·ª≠ d·ª•ng API)
final sinhVienLopHocListProvider = FutureProvider<List<LopHoc>>((ref) async {
  final currentUser = ref.watch(currentUserProvider);
  final sinhVienLopService = ref.watch(sinhVienLopServiceProvider);
  
  if (currentUser == null) {
    debugPrint('‚ö†Ô∏è Ch∆∞a c√≥ th√¥ng tin user, tr·∫£ v·ªÅ danh s√°ch r·ªóng');
    return [];
  }
  
  try {
    debugPrint('üîÑ ƒêang t·∫£i danh s√°ch l·ªõp h·ªçc cho sinh vi√™n: ${currentUser.hoVaTen}');
    final lopHocList = await sinhVienLopService.getLopHocDaThamGia();

    // API server ƒë√£ t·ª± ƒë·ªông l·ªçc theo role sinh vi√™n
    // Ch·ªâ tr·∫£ v·ªÅ c√°c l·ªõp m√† sinh vi√™n ƒë√£ tham gia
    debugPrint('‚úÖ T·∫£i ƒë∆∞·ª£c ${lopHocList.length} l·ªõp h·ªçc m√† sinh vi√™n ƒë√£ tham gia');
    return lopHocList;
  } catch (e) {
    debugPrint('‚ùå L·ªói khi t·∫£i danh s√°ch l·ªõp h·ªçc: $e');
    throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp h·ªçc: $e');
  }
});

// Provider cho l·ªõp h·ªçc ƒë∆∞·ª£c l·ªçc theo t√¨m ki·∫øm v√† b·ªô l·ªçc
final filteredSinhVienLopHocProvider = Provider.family<List<LopHoc>, Map<String, String>>((ref, filters) {
  final lopHocAsyncValue = ref.watch(sinhVienLopHocListProvider);
  
  return lopHocAsyncValue.when(
    data: (lopHocList) {
      final searchQuery = filters['search']?.toLowerCase() ?? '';
      final hocKyFilter = filters['hocKy'] ?? 'all';
      
      return lopHocList.where((lop) {
        // L·ªçc theo t√¨m ki·∫øm
        final searchMatches = searchQuery.isEmpty ||
            lop.tenlop.toLowerCase().contains(searchQuery);
        
        // L·ªçc theo h·ªçc k·ª≥
        final hocKyMatches = hocKyFilter == 'all' ||
            (lop.hocky != null && 'HK${lop.hocky}' == hocKyFilter);
        
        return searchMatches && hocKyMatches && (lop.hienthi ?? false);
      }).toList();
    },
    loading: () => [],
    error: (error, stack) {
      debugPrint('‚ùå L·ªói trong filteredSinhVienLopHocProvider: $error');
      return [];
    },
  );
});

// Provider cho chi ti·∫øt l·ªõp h·ªçc
final lopHocDetailProvider = FutureProvider.family<LopHoc?, int>((ref, lopId) async {
  final sinhVienLopService = ref.watch(sinhVienLopServiceProvider);
  
  try {
    debugPrint('üîÑ ƒêang t·∫£i chi ti·∫øt l·ªõp h·ªçc ID: $lopId');
    final lopHoc = await sinhVienLopService.getLopHocById(lopId);
    debugPrint('‚úÖ T·∫£i chi ti·∫øt l·ªõp h·ªçc th√†nh c√¥ng');
    return lopHoc;
  } catch (e) {
    debugPrint('‚ùå L·ªói khi t·∫£i chi ti·∫øt l·ªõp h·ªçc: $e');
    throw Exception('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt l·ªõp h·ªçc: $e');
  }
});

// TODO: Provider cho danh s√°ch sinh vi√™n trong l·ªõp (s·∫Ω implement sau)

// TODO: Notifier ƒë·ªÉ qu·∫£n l√Ω c√°c thao t√°c v·ªõi l·ªõp h·ªçc (s·∫Ω implement sau khi c·∫ßn)
