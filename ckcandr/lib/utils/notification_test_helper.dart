import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:ckcandr/models/thong_bao_model.dart';

/// Helper class ƒë·ªÉ test t√≠nh nƒÉng th√¥ng b√°o sinh vi√™n
/// Cung c·∫•p c√°c method ƒë·ªÉ t·∫°o mock data v√† test c√°c t√¨nh hu·ªëng kh√°c nhau
class NotificationTestHelper {
  
  /// t·∫°o mock notifications cho test
  static List<ThongBao> createMockNotifications() {
    final now = DateTime.now();
    
    return [
      // th√¥ng b√°o ƒë·ªÅ thi m·ªõi - c√≥ th·ªÉ v√†o thi
      ThongBao(
        maTb: 1,
        noiDung: 'üìù ƒê·ªÅ thi m·ªõi: "Ki·ªÉm tra gi·ªØa k·ª≥ L·∫≠p tr√¨nh C++" ƒë√£ ƒë∆∞·ª£c t·∫°o. Th·ªùi gian thi: ${_formatDateTime(now.add(const Duration(minutes: 5)))} - ${_formatDateTime(now.add(const Duration(hours: 2)))}',
        maMonHoc: 101,
        tenMonHoc: 'L·∫≠p tr√¨nh C++',
        namHoc: 2024,
        hocKy: 1,
        thoiGianTao: now.subtract(const Duration(hours: 1)),
        nguoiTao: 'teacher1',
        hoTenNguoiTao: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        tenLop: 'L·ªõp C++ N√¢ng cao',
        maLop: 1,
        examId: 123,
        examStartTime: now.add(const Duration(minutes: 5)),
        examEndTime: now.add(const Duration(hours: 2)),
        examName: 'Ki·ªÉm tra gi·ªØa k·ª≥ L·∫≠p tr√¨nh C++',
        isRead: false,
        type: NotificationType.examNew,
      ),
      
      // th√¥ng b√°o nh·∫Øc nh·ªü thi - ch∆∞a ƒë·∫øn gi·ªù
      ThongBao(
        maTb: 2,
        noiDung: '‚è∞ S·∫Øp c√≥ b√†i ki·ªÉm tra: "Ki·ªÉm tra cu·ªëi k·ª≥ Java" s·∫Ω b·∫Øt ƒë·∫ßu trong 2 gi·ªù.',
        maMonHoc: 102,
        tenMonHoc: 'L·∫≠p tr√¨nh Java',
        namHoc: 2024,
        hocKy: 1,
        thoiGianTao: now.subtract(const Duration(minutes: 30)),
        nguoiTao: 'teacher2',
        hoTenNguoiTao: 'C√¥ Tr·∫ßn Th·ªã B',
        tenLop: 'L·ªõp Java C∆° b·∫£n',
        maLop: 2,
        examId: 124,
        examStartTime: now.add(const Duration(hours: 2)),
        examEndTime: now.add(const Duration(hours: 4)),
        examName: 'Ki·ªÉm tra cu·ªëi k·ª≥ Java',
        isRead: false,
        type: NotificationType.examReminder,
      ),
      
      // th√¥ng b√°o ƒë·ªÅ thi ƒë√£ h·∫øt h·∫°n
      ThongBao(
        maTb: 3,
        noiDung: 'üìù ƒê·ªÅ thi "Ki·ªÉm tra Python" ƒë√£ k·∫øt th√∫c. K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c c√¥ng b·ªë s·ªõm.',
        maMonHoc: 103,
        tenMonHoc: 'L·∫≠p tr√¨nh Python',
        namHoc: 2024,
        hocKy: 1,
        thoiGianTao: now.subtract(const Duration(days: 1)),
        nguoiTao: 'teacher3',
        hoTenNguoiTao: 'Th·∫ßy L√™ VƒÉn C',
        tenLop: 'L·ªõp Python',
        maLop: 3,
        examId: 125,
        examStartTime: now.subtract(const Duration(days: 1, hours: 2)),
        examEndTime: now.subtract(const Duration(days: 1)),
        examName: 'Ki·ªÉm tra Python',
        isRead: true,
        type: NotificationType.examResult,
      ),
      
      // th√¥ng b√°o c·∫≠p nh·∫≠t ƒë·ªÅ thi
      ThongBao(
        maTb: 4,
        noiDung: '‚úèÔ∏è ƒê·ªÅ thi "Ki·ªÉm tra Database" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th·ªùi gian. Vui l√≤ng ki·ªÉm tra l·∫°i.',
        maMonHoc: 104,
        tenMonHoc: 'C∆° s·ªü d·ªØ li·ªáu',
        namHoc: 2024,
        hocKy: 1,
        thoiGianTao: now.subtract(const Duration(hours: 3)),
        nguoiTao: 'teacher4',
        hoTenNguoiTao: 'C√¥ Ph·∫°m Th·ªã D',
        tenLop: 'L·ªõp Database',
        maLop: 4,
        examId: 126,
        examStartTime: now.add(const Duration(days: 1)),
        examEndTime: now.add(const Duration(days: 1, hours: 2)),
        examName: 'Ki·ªÉm tra Database',
        isRead: false,
        type: NotificationType.examUpdate,
      ),
      
      // th√¥ng b√°o l·ªõp h·ªçc th∆∞·ªùng
      ThongBao(
        maTb: 5,
        noiDung: 'üì¢ L·ªãch h·ªçc tu·∫ßn t·ªõi s·∫Ω thay ƒë·ªïi. L·ªõp s·∫Ω h·ªçc v√†o th·ª© 3 thay v√¨ th·ª© 2.',
        maMonHoc: 105,
        tenMonHoc: 'Thu·∫≠t to√°n',
        namHoc: 2024,
        hocKy: 1,
        thoiGianTao: now.subtract(const Duration(hours: 6)),
        nguoiTao: 'teacher5',
        hoTenNguoiTao: 'Th·∫ßy Ho√†ng VƒÉn E',
        tenLop: 'L·ªõp Thu·∫≠t to√°n',
        maLop: 5,
        isRead: true,
        type: NotificationType.classInfo,
      ),
      
      // th√¥ng b√°o h·ªá th·ªëng
      ThongBao(
        maTb: 6,
        noiDung: 'üîß H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ t·ª´ 23:00 - 01:00 ƒë√™m nay. Vui l√≤ng ho√†n th√†nh b√†i thi tr∆∞·ªõc th·ªùi gian n√†y.',
        thoiGianTao: now.subtract(const Duration(hours: 12)),
        isRead: false,
        type: NotificationType.system,
      ),
    ];
  }

  /// test c√°c tr∆∞·ªùng h·ª£p kh√°c nhau c·ªßa n√∫t "V√†o thi"
  static void testExamButtonStates() {
    final notifications = createMockNotifications();
    
    debugPrint('=== TEST EXAM BUTTON STATES ===');
    
    for (final notification in notifications) {
      if (notification.isExamNotification) {
        debugPrint('\nüìù Th√¥ng b√°o: ${notification.noiDung.substring(0, 50)}...');
        debugPrint('   - C√≥ th·ªÉ v√†o thi: ${notification.canTakeExam}');
        debugPrint('   - ƒê√£ h·∫øt h·∫°n: ${notification.isExamExpired}');
        debugPrint('   - Th·ªùi gian c√≤n l·∫°i: ${notification.timeUntilExam?.inMinutes ?? 0} ph√∫t');
        
        String buttonState;
        if (notification.isExamExpired) {
          buttonState = 'ƒê√£ h·∫øt h·∫°n (disabled)';
        } else if (notification.canTakeExam) {
          buttonState = 'V√†o thi ngay (enabled)';
        } else if (notification.timeUntilExam != null) {
          final hours = notification.timeUntilExam!.inHours;
          final minutes = notification.timeUntilExam!.inMinutes % 60;
          buttonState = 'C√≤n ${hours}h ${minutes}m (disabled)';
        } else {
          buttonState = 'Xem chi ti·∫øt (enabled)';
        }
        
        debugPrint('   - Tr·∫°ng th√°i n√∫t: $buttonState');
      }
    }
    
    debugPrint('\n=== END TEST ===');
  }

  /// test tr·∫°ng th√°i ƒë√£ ƒë·ªçc/ch∆∞a ƒë·ªçc
  static void testReadUnreadStates() {
    final notifications = createMockNotifications();
    
    debugPrint('=== TEST READ/UNREAD STATES ===');
    
    final unreadCount = notifications.where((n) => !n.isRead).length;
    final totalCount = notifications.length;
    
    debugPrint('T·ªïng s·ªë th√¥ng b√°o: $totalCount');
    debugPrint('S·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc: $unreadCount');
    debugPrint('S·ªë th√¥ng b√°o ƒë√£ ƒë·ªçc: ${totalCount - unreadCount}');
    
    debugPrint('\nChi ti·∫øt:');
    for (final notification in notifications) {
      final status = notification.isRead ? '‚úÖ ƒê√£ ƒë·ªçc' : 'üî¥ Ch∆∞a ƒë·ªçc';
      debugPrint('   - ID ${notification.maTb}: $status');
    }
    
    debugPrint('\n=== END TEST ===');
  }

  /// test notification types v√† icons
  static void testNotificationTypes() {
    final notifications = createMockNotifications();
    
    debugPrint('=== TEST NOTIFICATION TYPES ===');
    
    for (final notification in notifications) {
      String icon;
      String color;
      
      switch (notification.type) {
        case NotificationType.examNew:
          icon = 'üìù';
          color = 'Blue';
          break;
        case NotificationType.examReminder:
          icon = '‚è∞';
          color = 'Orange';
          break;
        case NotificationType.examUpdate:
          icon = '‚úèÔ∏è';
          color = 'Purple';
          break;
        case NotificationType.examResult:
          icon = 'üéØ';
          color = 'Green';
          break;
        case NotificationType.classInfo:
          icon = 'üì¢';
          color = 'Teal';
          break;
        case NotificationType.system:
          icon = 'üîß';
          color = 'Grey';
          break;
        case NotificationType.general:
          icon = 'üìÑ';
          color = 'Indigo';
          break;
      }
      
      debugPrint('ID ${notification.maTb}: $icon ${notification.type.name} ($color)');
    }
    
    debugPrint('\n=== END TEST ===');
  }

  /// reset t·∫•t c·∫£ tr·∫°ng th√°i test
  static Future<void> resetTestState() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // x√≥a t·∫•t c·∫£ keys li√™n quan ƒë·∫øn notification
      await prefs.remove('read_notifications');
      await prefs.remove('notification_reminder_shown_today');
      await prefs.remove('notification_reminder_last_date');
      
      debugPrint('‚úÖ Reset test state th√†nh c√¥ng');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi reset test state: $e');
    }
  }

  /// ch·∫°y t·∫•t c·∫£ tests
  static void runAllTests() {
    debugPrint('üß™ B·∫ÆT ƒê·∫¶U CH·∫†Y T·∫§T C·∫¢ TESTS');
    debugPrint('=====================================');
    
    testNotificationTypes();
    testReadUnreadStates();
    testExamButtonStates();
    
    debugPrint('=====================================');
    debugPrint('üéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢ TESTS');
  }

  /// helper method ƒë·ªÉ format datetime
  static String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day.toString().padLeft(2, '0')}/${dateTime.month.toString().padLeft(2, '0')}/${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  /// t·∫°o notification v·ªõi th·ªùi gian t√πy ch·ªânh ƒë·ªÉ test
  static ThongBao createTestExamNotification({
    required int id,
    required String examName,
    required DateTime examStartTime,
    required DateTime examEndTime,
    bool isRead = false,
  }) {
    return ThongBao(
      maTb: id,
      noiDung: 'üìù ƒê·ªÅ thi m·ªõi: "$examName" ƒë√£ ƒë∆∞·ª£c t·∫°o. Th·ªùi gian thi: ${_formatDateTime(examStartTime)} - ${_formatDateTime(examEndTime)}',
      maMonHoc: 999,
      tenMonHoc: 'Test Subject',
      namHoc: 2024,
      hocKy: 1,
      thoiGianTao: DateTime.now().subtract(const Duration(hours: 1)),
      nguoiTao: 'test_teacher',
      hoTenNguoiTao: 'Test Teacher',
      tenLop: 'Test Class',
      maLop: 999,
      examId: id,
      examStartTime: examStartTime,
      examEndTime: examEndTime,
      examName: examName,
      isRead: isRead,
      type: NotificationType.examNew,
    );
  }
}
