import 'package:json_annotation/json_annotation.dart';

part 'exam_taking_model.g.dart';

/// Model cho vi·ªác l√†m b√†i thi c·ªßa sinh vi√™n
/// Bao g·ªìm th√¥ng tin ƒë·ªÅ thi, c√¢u h·ªèi v√† ƒë√°p √°n

/// Th√¥ng tin ƒë·ªÅ thi cho sinh vi√™n (mapping v·ªõi ExamForClassDto t·ª´ backend)
@JsonSerializable()
class ExamForStudent {
  @JsonKey(name: 'made')
  final int examId;

  @JsonKey(name: 'tende')
  final String? examName;

  @JsonKey(name: 'tenMonHoc')
  final String? subjectName;

  @JsonKey(name: 'thoigianthi')
  final int? duration; // th·ªùi gian thi (ph√∫t)

  @JsonKey(name: 'thoigiantbatdau')
  final DateTime? startTime;

  @JsonKey(name: 'thoigianketthuc')
  final DateTime? endTime;

  @JsonKey(name: 'tongSoCau')
  final int totalQuestions;

  @JsonKey(name: 'trangthaiThi')
  final String status; // SapDienRa, DangDienRa, DaKetThuc

  @JsonKey(name: 'ketQuaId')
  final int? resultId; // null n·∫øu ch∆∞a thi

  // C√°c field n√†y kh√¥ng c√≥ trong backend DTO, set default
  final bool? showExamPaper;
  final bool? showScore;
  final bool? showAnswers;

  const ExamForStudent({
    required this.examId,
    this.examName,
    this.subjectName,
    this.duration,
    this.startTime,
    this.endTime,
    required this.totalQuestions,
    required this.status,
    this.resultId,
    this.showExamPaper,
    this.showScore,
    this.showAnswers,
  });

  factory ExamForStudent.fromJson(Map<String, dynamic> json) => _$ExamForStudentFromJson(json);
  Map<String, dynamic> toJson() => _$ExamForStudentToJson(this);

  /// ki·ªÉm tra c√≥ th·ªÉ v√†o thi kh√¥ng
  bool get canTakeExam {
    if (startTime == null || endTime == null) return false;
    final now = DateTime.now();

    // Cho ph√©p v√†o thi tr∆∞·ªõc 5 ph√∫t v√† sau khi k·∫øt th√∫c 5 ph√∫t (gi·ªëng backend)
    final allowedStartTime = startTime!.subtract(const Duration(minutes: 5));
    final allowedEndTime = endTime!.add(const Duration(minutes: 5));

    print('üïê Flutter Time check - Now: $now');
    print('üïê Allowed time: $allowedStartTime - $allowedEndTime');
    print('üïê Status: $status, ResultId: $resultId');

    // Cho ph√©p v√†o thi n·∫øu trong th·ªùi gian h·ª£p l·ªá v√† ch∆∞a thi (b·ªè qua status)
    final timeIsValid = now.isAfter(allowedStartTime) && now.isBefore(allowedEndTime);
    final notTakenYet = resultId == null;

    print('üïê Time valid: $timeIsValid, Not taken: $notTakenYet');

    return timeIsValid && notTakenYet;
  }

  /// ki·ªÉm tra ƒë√£ h·∫øt h·∫°n ch∆∞a
  bool get isExpired {
    if (endTime == null) return false;
    return status == 'DaKetThuc' || DateTime.now().isAfter(endTime!);
  }

  /// th·ªùi gian c√≤n l·∫°i ƒë·ªÉ thi
  Duration? get timeRemaining {
    if (status != 'DangDienRa' || endTime == null) return null;
    final now = DateTime.now();
    if (now.isBefore(endTime!)) {
      return endTime!.difference(now);
    }
    return null;
  }
}

/// C√¢u h·ªèi trong b√†i thi
@JsonSerializable()
class ExamQuestion {
  @JsonKey(name: 'macauhoi')
  final int questionId;

  @JsonKey(name: 'noidung')  // S·ª¨A: match v·ªõi server response
  final String content;

  @JsonKey(name: 'dokho')  // S·ª¨A: match v·ªõi server response (c√≥ th·ªÉ l√† lowercase)
  final String? difficulty; // De, TrungBinh, Kho - nullable ƒë·ªÉ tr√°nh l·ªói

  @JsonKey(name: 'hinhanhurl')  // S·ª¨A: match v·ªõi server response
  final String? imageUrl;

  @JsonKey(name: 'loaicauhoi')  // S·ª¨A: match v·ªõi server response
  final String questionType; // single_choice, multiple_choice, essay, etc.

  @JsonKey(name: 'answers')  // S·ª¨A: match v·ªõi server response
  final List<ExamAnswer> answers;

  // local state cho vi·ªác l√†m b√†i
  final String? selectedAnswerId;
  final List<String>? selectedAnswerIds; // For multiple choice
  final String? essayAnswer; // For essay questions
  final bool isAnswered;

  const ExamQuestion({
    required this.questionId,
    required this.content,
    this.difficulty,  // S·ª¨A: nullable ƒë·ªÉ tr√°nh l·ªói khi server kh√¥ng tr·∫£ v·ªÅ
    this.imageUrl,
    required this.questionType,
    required this.answers,
    this.selectedAnswerId,
    this.selectedAnswerIds,
    this.essayAnswer,
    this.isAnswered = false,
  });

  factory ExamQuestion.fromJson(Map<String, dynamic> json) => _$ExamQuestionFromJson(json);
  Map<String, dynamic> toJson() => _$ExamQuestionToJson(this);

  ExamQuestion copyWith({
    String? selectedAnswerId,
    List<String>? selectedAnswerIds,
    String? essayAnswer,
    bool? isAnswered,
  }) {
    return ExamQuestion(
      questionId: questionId,
      content: content,
      difficulty: difficulty,
      imageUrl: imageUrl,
      questionType: questionType,
      answers: answers,
      selectedAnswerId: selectedAnswerId ?? this.selectedAnswerId,
      selectedAnswerIds: selectedAnswerIds ?? this.selectedAnswerIds,
      essayAnswer: essayAnswer ?? this.essayAnswer,
      isAnswered: isAnswered ?? this.isAnswered,
    );
  }
}

/// ƒê√°p √°n c·ªßa c√¢u h·ªèi
@JsonSerializable()
class ExamAnswer {
  @JsonKey(name: 'macautl')  // S·ª¨A: match v·ªõi server response
  final int answerId;

  @JsonKey(name: 'noidungtl')  // S·ª¨A: match v·ªõi server response
  final String content;

  // Kh√¥ng nh·∫≠n isCorrect t·ª´ backend ƒë·ªÉ tr√°nh l·ªô ƒë√°p √°n
  final bool isCorrect;

  const ExamAnswer({
    required this.answerId,
    required this.content,
    this.isCorrect = false, // Default false v√¨ backend kh√¥ng tr·∫£ v·ªÅ
  });

  factory ExamAnswer.fromJson(Map<String, dynamic> json) => _$ExamAnswerFromJson(json);
  Map<String, dynamic> toJson() => _$ExamAnswerToJson(this);
}

/// Request ƒë·ªÉ submit b√†i thi
@JsonSerializable()
class SubmitExamRequest {
  @JsonKey(name: 'made')
  final int examId;

  @JsonKey(name: 'manguoidung')
  final String studentId;

  @JsonKey(name: 'thoigianbatdau')
  final DateTime startTime;

  @JsonKey(name: 'thoigianketthuc')
  final DateTime endTime;

  @JsonKey(name: 'chiTietTraLoi')
  final List<StudentAnswer> answers;

  const SubmitExamRequest({
    required this.examId,
    required this.studentId,
    required this.startTime,
    required this.endTime,
    required this.answers,
  });

  factory SubmitExamRequest.fromJson(Map<String, dynamic> json) => _$SubmitExamRequestFromJson(json);
  Map<String, dynamic> toJson() => _$SubmitExamRequestToJson(this);
}

/// ƒê√°p √°n c·ªßa sinh vi√™n
@JsonSerializable()
class StudentAnswer {
  @JsonKey(name: 'macauhoi')
  final int questionId;

  @JsonKey(name: 'macautraloi')
  final int? selectedAnswerId; // Single choice

  @JsonKey(name: 'danhSachMacautraloi')
  final List<int>? selectedAnswerIds; // Multiple choice

  @JsonKey(name: 'cauTraLoiTuLuan')
  final String? essayAnswer; // Essay

  @JsonKey(name: 'thoigiantraloi')
  final DateTime? answerTime;

  const StudentAnswer({
    required this.questionId,
    this.selectedAnswerId,
    this.selectedAnswerIds,
    this.essayAnswer,
    this.answerTime,
  });

  factory StudentAnswer.fromJson(Map<String, dynamic> json) => _$StudentAnswerFromJson(json);
  Map<String, dynamic> toJson() => _$StudentAnswerToJson(this);
}

/// K·∫øt qu·∫£ sau khi submit b√†i thi
@JsonSerializable()
class ExamResult {
  @JsonKey(name: 'makq')
  final int resultId;

  @JsonKey(name: 'made')
  final int examId;

  @JsonKey(name: 'manguoidung')
  final String studentId;

  @JsonKey(name: 'diem')
  final double score;

  @JsonKey(name: 'socaudung')
  final int correctAnswers;

  @JsonKey(name: 'tongcauhoi')
  final int totalQuestions;

  @JsonKey(name: 'thoigianbatdau')
  final DateTime startTime;

  @JsonKey(name: 'thoigianketthuc')
  final DateTime endTime;

  @JsonKey(name: 'thoigianhoanthanh')
  final DateTime completedTime;

  const ExamResult({
    required this.resultId,
    required this.examId,
    required this.studentId,
    required this.score,
    required this.correctAnswers,
    required this.totalQuestions,
    required this.startTime,
    required this.endTime,
    required this.completedTime,
  });

  factory ExamResult.fromJson(Map<String, dynamic> json) => _$ExamResultFromJson(json);
  Map<String, dynamic> toJson() => _$ExamResultToJson(this);

  /// t√≠nh ph·∫ßn trƒÉm ƒëi·ªÉm
  double get percentage => (score / 10) * 100;

  /// th·ªùi gian l√†m b√†i
  Duration get duration => completedTime.difference(startTime);

  /// ƒë√°nh gi√° k·∫øt qu·∫£
  String get grade {
    if (score >= 9) return 'Xu·∫•t s·∫Øc';
    if (score >= 8) return 'Gi·ªèi';
    if (score >= 7) return 'Kh√°';
    if (score >= 5) return 'Trung b√¨nh';
    return 'Y·∫øu';
  }
}

/// State cho vi·ªác l√†m b√†i thi - Enhanced for Vue.js compatibility
class ExamTakingState {
  final ExamForStudent? exam;
  final List<ExamQuestion> questions;
  final int currentQuestionIndex;
  final Map<int, String> studentAnswers; // questionId -> answerId
  final DateTime? startTime;
  final Duration? timeRemaining;
  final bool isLoading;
  final bool isSubmitting;
  final String? error;
  final ExamResult? result;
  final int? ketQuaId; // ID k·∫øt qu·∫£ t·ª´ server khi start exam

  const ExamTakingState({
    this.exam,
    this.questions = const [],
    this.currentQuestionIndex = 0,
    this.studentAnswers = const {},
    this.startTime,
    this.timeRemaining,
    this.isLoading = false,
    this.isSubmitting = false,
    this.error,
    this.result,
    this.ketQuaId,
  });

  ExamTakingState copyWith({
    ExamForStudent? exam,
    List<ExamQuestion>? questions,
    int? currentQuestionIndex,
    Map<int, String>? studentAnswers,
    DateTime? startTime,
    Duration? timeRemaining,
    bool? isLoading,
    bool? isSubmitting,
    String? error,
    ExamResult? result,
    int? ketQuaId,
  }) {
    return ExamTakingState(
      exam: exam ?? this.exam,
      questions: questions ?? this.questions,
      currentQuestionIndex: currentQuestionIndex ?? this.currentQuestionIndex,
      studentAnswers: studentAnswers ?? this.studentAnswers,
      startTime: startTime ?? this.startTime,
      timeRemaining: timeRemaining ?? this.timeRemaining,
      isLoading: isLoading ?? this.isLoading,
      isSubmitting: isSubmitting ?? this.isSubmitting,
      error: error,
      result: result ?? this.result,
      ketQuaId: ketQuaId ?? this.ketQuaId,
    );
  }

  /// s·ªë c√¢u ƒë√£ tr·∫£ l·ªùi
  int get answeredCount => studentAnswers.length;

  /// ti·∫øn ƒë·ªô l√†m b√†i (%)
  double get progress {
    if (questions.isEmpty) return 0;
    return answeredCount / questions.length;
  }

  /// c√≥ th·ªÉ submit kh√¥ng
  bool get canSubmit => answeredCount > 0 && !isSubmitting;
}

/// Chi ti·∫øt k·∫øt qu·∫£ thi v·ªõi ƒë√°p √°n c·ªßa sinh vi√™n
@JsonSerializable()
class ExamResultDetail {
  @JsonKey(name: 'makq')
  final int resultId;

  @JsonKey(name: 'made')
  final int examId;

  @JsonKey(name: 'tende')
  final String examName;

  @JsonKey(name: 'manguoidung')
  final String studentId;

  @JsonKey(name: 'hoten')
  final String studentName;

  @JsonKey(name: 'diem')
  final double score;

  @JsonKey(name: 'socaudung')
  final int correctAnswers;

  @JsonKey(name: 'tongcauhoi')
  final int totalQuestions;

  @JsonKey(name: 'thoigianbatdau')
  final DateTime startTime;

  @JsonKey(name: 'thoigianketthuc')
  final DateTime endTime;

  @JsonKey(name: 'thoigianhoanthanh')
  final DateTime completedTime;

  @JsonKey(name: 'chiTietTraLoi')
  final List<StudentAnswerDetail> answerDetails;

  const ExamResultDetail({
    required this.resultId,
    required this.examId,
    required this.examName,
    required this.studentId,
    required this.studentName,
    required this.score,
    required this.correctAnswers,
    required this.totalQuestions,
    required this.startTime,
    required this.endTime,
    required this.completedTime,
    required this.answerDetails,
  });

  factory ExamResultDetail.fromJson(Map<String, dynamic> json) => _$ExamResultDetailFromJson(json);
  Map<String, dynamic> toJson() => _$ExamResultDetailToJson(this);

  /// t√≠nh ph·∫ßn trƒÉm ƒëi·ªÉm
  double get percentage => (score / 10) * 100;

  /// th·ªùi gian l√†m b√†i
  Duration get duration => completedTime.difference(startTime);

  /// ƒë√°nh gi√° k·∫øt qu·∫£
  String get grade {
    if (score >= 9) return 'Xu·∫•t s·∫Øc';
    if (score >= 8) return 'Gi·ªèi';
    if (score >= 7) return 'Kh√°';
    if (score >= 5) return 'Trung b√¨nh';
    return 'Y·∫øu';
  }
}

/// Chi ti·∫øt ƒë√°p √°n c·ªßa sinh vi√™n cho t·ª´ng c√¢u h·ªèi
@JsonSerializable()
class StudentAnswerDetail {
  @JsonKey(name: 'macauhoi')
  final int questionId;

  @JsonKey(name: 'noiDungCauHoi')
  final String questionContent;

  @JsonKey(name: 'loaiCauHoi')
  final String? questionType; // single_choice, multiple_choice, essay

  // Single choice
  @JsonKey(name: 'macautraloichon')
  final int? selectedAnswerId;

  @JsonKey(name: 'noiDungTraLoiChon')
  final String? selectedAnswerContent;

  // Multiple choice
  @JsonKey(name: 'danhSachMacautraloiChon')
  final List<int>? selectedAnswerIds;

  @JsonKey(name: 'danhSachNoiDungTraLoiChon')
  final List<String>? selectedAnswerContents;

  // Essay
  @JsonKey(name: 'cauTraLoiTuLuan')
  final String? essayAnswer;

  // Correct answers
  @JsonKey(name: 'macautraloiDung')
  final int? correctAnswerId;

  @JsonKey(name: 'noiDungTraLoiDung')
  final String? correctAnswerContent;

  @JsonKey(name: 'danhSachMacautraloiDung')
  final List<int>? correctAnswerIds;

  @JsonKey(name: 'danhSachNoiDungTraLoiDung')
  final List<String>? correctAnswerContents;

  @JsonKey(name: 'laDung')
  final bool isCorrect;

  @JsonKey(name: 'thoigiantraloi')
  final DateTime? answerTime;

  const StudentAnswerDetail({
    required this.questionId,
    required this.questionContent,
    this.questionType,
    this.selectedAnswerId,
    this.selectedAnswerContent,
    this.selectedAnswerIds,
    this.selectedAnswerContents,
    this.essayAnswer,
    this.correctAnswerId,
    this.correctAnswerContent,
    this.correctAnswerIds,
    this.correctAnswerContents,
    required this.isCorrect,
    this.answerTime,
  });

  factory StudentAnswerDetail.fromJson(Map<String, dynamic> json) {
    // T·∫°m th·ªùi x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ backend hi·ªán t·∫°i
    final detail = _$StudentAnswerDetailFromJson(json);

    // N·∫øu kh√¥ng c√≥ questionType, c·ªë g·∫Øng suy ƒëo√°n t·ª´ d·ªØ li·ªáu
    String? inferredType = detail.questionType;
    if (inferredType == null) {
      if (detail.selectedAnswerContent != null && detail.selectedAnswerContent!.contains(',')) {
        inferredType = 'multiple_choice';
      } else if (detail.selectedAnswerContent != null && detail.selectedAnswerContent!.length > 100) {
        inferredType = 'essay';
      } else {
        inferredType = 'single_choice';
      }
    }

    return StudentAnswerDetail(
      questionId: detail.questionId,
      questionContent: detail.questionContent,
      questionType: inferredType,
      selectedAnswerId: detail.selectedAnswerId,
      selectedAnswerContent: detail.selectedAnswerContent,
      selectedAnswerIds: detail.selectedAnswerIds,
      selectedAnswerContents: detail.selectedAnswerContents,
      essayAnswer: detail.essayAnswer,
      correctAnswerId: detail.correctAnswerId,
      correctAnswerContent: detail.correctAnswerContent,
      correctAnswerIds: detail.correctAnswerIds,
      correctAnswerContents: detail.correctAnswerContents,
      isCorrect: detail.isCorrect,
      answerTime: detail.answerTime,
    );
  }

  Map<String, dynamic> toJson() => _$StudentAnswerDetailToJson(this);

  /// sinh vi√™n c√≥ tr·∫£ l·ªùi c√¢u n√†y kh√¥ng
  bool get isAnswered {
    switch (questionType?.toLowerCase()) {
      case 'single_choice':
        return selectedAnswerId != null;
      case 'multiple_choice':
        return selectedAnswerIds != null && selectedAnswerIds!.isNotEmpty;
      case 'essay':
        return essayAnswer != null && essayAnswer!.trim().isNotEmpty;
      default:
        return selectedAnswerId != null ||
               (selectedAnswerIds != null && selectedAnswerIds!.isNotEmpty) ||
               (essayAnswer != null && essayAnswer!.trim().isNotEmpty);
    }
  }

  /// tr·∫°ng th√°i c√¢u tr·∫£ l·ªùi
  String get status {
    if (!isAnswered) return 'Kh√¥ng tr·∫£ l·ªùi';
    return isCorrect ? 'ƒê√∫ng' : 'Sai';
  }

  /// L·∫•y n·ªôi dung c√¢u tr·∫£ l·ªùi c·ªßa sinh vi√™n
  String get studentAnswerDisplay {
    switch (questionType?.toLowerCase()) {
      case 'single_choice':
        return selectedAnswerContent ?? 'Kh√¥ng tr·∫£ l·ªùi';
      case 'multiple_choice':
        if (selectedAnswerContents != null && selectedAnswerContents!.isNotEmpty) {
          return selectedAnswerContents!.join(', ');
        }
        return 'Kh√¥ng tr·∫£ l·ªùi';
      case 'essay':
        return essayAnswer?.trim().isNotEmpty == true ? essayAnswer! : 'Kh√¥ng tr·∫£ l·ªùi';
      default:
        return selectedAnswerContent ?? essayAnswer ?? 'Kh√¥ng tr·∫£ l·ªùi';
    }
  }

  /// L·∫•y n·ªôi dung ƒë√°p √°n ƒë√∫ng
  String get correctAnswerDisplay {
    switch (questionType?.toLowerCase()) {
      case 'single_choice':
        return correctAnswerContent ?? 'Kh√¥ng c√≥ ƒë√°p √°n';
      case 'multiple_choice':
        if (correctAnswerContents != null && correctAnswerContents!.isNotEmpty) {
          return correctAnswerContents!.join(', ');
        }
        return correctAnswerContent ?? 'Kh√¥ng c√≥ ƒë√°p √°n';
      case 'essay':
        // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng cho c√¢u t·ª± lu·∫≠n n·∫øu c√≥
        return correctAnswerContent ?? 'Kh√¥ng c√≥ ƒë√°p √°n m·∫´u';
      default:
        return correctAnswerContent ?? 'Kh√¥ng c√≥ ƒë√°p √°n';
    }
  }
}
