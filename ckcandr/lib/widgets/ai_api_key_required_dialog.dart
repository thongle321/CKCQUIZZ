import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:ckcandr/providers/ai_provider.dart';
import 'package:google_generative_ai/google_generative_ai.dart';

class AiApiKeyRequiredDialog extends ConsumerStatefulWidget {
  const AiApiKeyRequiredDialog({super.key});

  @override
  ConsumerState<AiApiKeyRequiredDialog> createState() => _AiApiKeyRequiredDialogState();
}

class _AiApiKeyRequiredDialogState extends ConsumerState<AiApiKeyRequiredDialog> {
  final _apiKeyController = TextEditingController();
  bool _isLoading = false;
  bool _obscureText = true;
  String? _errorMessage;

  @override
  void dispose() {
    _apiKeyController.dispose();
    super.dispose();
  }

  Future<void> _saveApiKey({bool skipValidation = false}) async {
    final apiKey = _apiKeyController.text.trim();

    if (apiKey.isEmpty) {
      setState(() {
        _errorMessage = 'Vui l√≤ng nh·∫≠p API key';
      });
      return;
    }

    if (!_isValidApiKeyFormat(apiKey)) {
      setState(() {
        _errorMessage = 'API key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng AIzaSy v√† c√≥ √≠t nh·∫•t 20 k√Ω t·ª±)';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      bool success;
      if (skipValidation) {
        // Save without validation - directly update database
        final aiService = ref.read(aiServiceProvider);
        final settings = await aiService.getSettings();
        final newSettings = settings.copyWith(apiKey: apiKey);
        await aiService.updateSettings(newSettings);
        success = true;
      } else {
        // Save with validation
        success = await ref.read(aiSettingsControllerProvider.notifier).updateApiKey(apiKey);
      }

      if (success) {
        if (mounted) {
          Navigator.of(context).pop(true);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(skipValidation
                ? '‚úÖ API key ƒë√£ ƒë∆∞·ª£c l∆∞u (b·ªè qua ki·ªÉm tra)!'
                : '‚úÖ API key ƒë√£ ƒë∆∞·ª£c l∆∞u v√† x√°c th·ª±c th√†nh c√¥ng!'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        setState(() {
          _errorMessage = 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Google AI.\n\n'
              'Vui l√≤ng:\n'
              '‚Ä¢ Ki·ªÉm tra l·∫°i API key t·ª´ Google AI Studio\n'
              '‚Ä¢ ƒê·∫£m b·∫£o API key ch∆∞a h·∫øt h·∫°n\n'
              '‚Ä¢ Th·ª≠ "L∆∞u kh√¥ng ki·ªÉm tra" n·∫øu m·∫°ng c√≥ v·∫•n ƒë·ªÅ\n\n'
              'API key hi·ªán t·∫°i: ${apiKey.substring(0, 10)}... (${apiKey.length} k√Ω t·ª±)';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'C√≥ l·ªói x·∫£y ra: $e';
      });
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  bool _isValidApiKeyFormat(String apiKey) {
    debugPrint('üîç Checking API key format: length=${apiKey.length}, starts with AIzaSy=${apiKey.startsWith('AIzaSy')}');
    // Google AI API keys can have different formats:
    // - AIzaSy... (most common, 39-40 chars)
    // - Some newer keys might be shorter or longer
    // Let's be very flexible with validation
    return apiKey.startsWith('AIzaSy') && apiKey.length >= 20 && apiKey.length <= 50;
  }

  void _copyApiKeyUrl() {
    const url = 'https://aistudio.google.com/apikey';
    Clipboard.setData(const ClipboardData(text: url));

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üìã ƒê√£ sao ch√©p link! M·ªü tr√¨nh duy·ªát v√† d√°n link ƒë·ªÉ l·∫•y API key'),
        duration: Duration(seconds: 3),
      ),
    );
  }

  Future<void> _testApiKeyOnly() async {
    final apiKey = _apiKeyController.text.trim();

    if (apiKey.isEmpty) {
      setState(() {
        _errorMessage = 'Vui l√≤ng nh·∫≠p API key ƒë·ªÉ test';
      });
      return;
    }

    if (!_isValidApiKeyFormat(apiKey)) {
      setState(() {
        _errorMessage = 'API key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng AIzaSy v√† c√≥ √≠t nh·∫•t 20 k√Ω t·ª±)';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      // Test API key without saving - try multiple models
      final modelNames = ['gemini-1.5-flash', 'gemini-pro', 'gemini-1.5-pro'];
      String? successResponse;
      String? lastError;

      for (final modelName in modelNames) {
        try {
          setState(() {
            _errorMessage = 'üîÑ Testing v·ªõi model: $modelName...';
          });

          final testModel = GenerativeModel(
            model: modelName,
            apiKey: apiKey,
          );

          final testResponse = await testModel.generateContent([
            Content.text('Hi')
          ]).timeout(const Duration(seconds: 20));

          if (testResponse.text != null && testResponse.text!.isNotEmpty) {
            successResponse = testResponse.text!;
            final displayText = successResponse.length > 100 ? successResponse.substring(0, 100) : successResponse;
            setState(() {
              _errorMessage = '‚úÖ API key h·ª£p l·ªá v·ªõi model $modelName!\n\nResponse: $displayText...';
            });
            return; // Success, exit early
          }
        } catch (e) {
          lastError = e.toString();
          debugPrint('‚ùå Model $modelName failed: $e');
          continue;
        }
      }

      // If we get here, all models failed
      setState(() {
        _errorMessage = '‚ùå API key test failed v·ªõi t·∫•t c·∫£ models.\n\nL·ªói cu·ªëi: $lastError\n\nH√£y th·ª≠:\n‚Ä¢ Ki·ªÉm tra API key t·ª´ Google AI Studio\n‚Ä¢ ƒê·∫£m b·∫£o API key ch∆∞a h·∫øt h·∫°n\n‚Ä¢ Th·ª≠ "L∆∞u kh√¥ng ki·ªÉm tra" n·∫øu ch·∫Øc ch·∫Øn key ƒë√∫ng';
      });
    } catch (e) {
      setState(() {
        _errorMessage = '‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: $e';
      });
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _clearOldApiKey() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      // Clear API key from database
      final aiService = ref.read(aiServiceProvider);
      await aiService.clearApiKey();

      setState(() {
        _errorMessage = 'üóëÔ∏è ƒê√£ x√≥a API key c≈©. H√£y nh·∫≠p API key m·ªõi v√† test l·∫°i.';
      });
    } catch (e) {
      setState(() {
        _errorMessage = '‚ùå L·ªói khi x√≥a API key: $e';
      });
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: true, // Cho ph√©p ƒë√≥ng dialog
      child: AlertDialog(
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Icon(
                Icons.smart_toy,
                color: Colors.blue,
                size: 24,
              ),
            ),
            const SizedBox(width: 12),
            const Expanded(
              child: Text(
                'C√†i ƒë·∫∑t AI Assistant',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'ƒê·ªÉ s·ª≠ d·ª•ng AI Assistant, b·∫°n c·∫ßn cung c·∫•p Google AI API Key.',
                style: TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 16),
              
              // H∆∞·ªõng d·∫´n l·∫•y API Key
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue[700], size: 20),
                        const SizedBox(width: 8),
                        Text(
                          'H∆∞·ªõng d·∫´n l·∫•y API Key',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text('1. Nh·∫•n n√∫t "L·∫•y API Key" b√™n d∆∞·ªõi'),
                    const Text('2. ƒêƒÉng nh·∫≠p Google v√† t·∫°o API key m·ªõi'),
                    const Text('3. Sao ch√©p API key v√† d√°n v√†o √¥ b√™n d∆∞·ªõi'),
                    const Text('4. Nh·∫•n "L∆∞u" ƒë·ªÉ ho√†n t·∫•t'),
                  ],
                ),
              ),
              
              const SizedBox(height: 16),
              
              // N√∫t l·∫•y API Key
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: _copyApiKeyUrl,
                  icon: const Icon(Icons.open_in_browser),
                  label: const Text('L·∫•y API Key'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                ),
              ),
              
              const SizedBox(height: 16),
              
              // Input API Key
              TextField(
                controller: _apiKeyController,
                obscureText: _obscureText,
                decoration: InputDecoration(
                  labelText: 'Google AI API Key',
                  hintText: 'AIzaSy...',
                  border: const OutlineInputBorder(),
                  prefixIcon: const Icon(Icons.key),
                  suffixIcon: IconButton(
                    icon: Icon(_obscureText ? Icons.visibility : Icons.visibility_off),
                    onPressed: () {
                      setState(() {
                        _obscureText = !_obscureText;
                      });
                    },
                  ),
                  errorText: _errorMessage,
                ),
                onChanged: (value) {
                  if (_errorMessage != null) {
                    setState(() {
                      _errorMessage = null;
                    });
                  }
                },
              ),
              
              const SizedBox(height: 16),
              
              // Th√¥ng tin b·ªï sung
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.security, color: Colors.orange[700], size: 20),
                        const SizedBox(width: 8),
                        Text(
                          'B·∫£o m·∫≠t',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.orange[700],
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'API key ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n tr√™n thi·∫øt b·ªã c·ªßa b·∫°n v√† ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ giao ti·∫øp v·ªõi Google AI.',
                      style: TextStyle(fontSize: 13),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          Column(
            children: [
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _saveApiKey,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: _isLoading
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : const Text(
                          'L∆∞u v√† Ki·ªÉm tra API Key',
                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                ),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Expanded(
                    child: TextButton(
                      onPressed: _isLoading ? null : _testApiKeyOnly,
                      style: TextButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: const Text(
                        'Ch·ªâ test',
                        style: TextStyle(fontSize: 14),
                      ),
                    ),
                  ),
                  const SizedBox(width: 4),
                  Expanded(
                    child: TextButton(
                      onPressed: _isLoading ? null : _clearOldApiKey,
                      style: TextButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        foregroundColor: Colors.red,
                      ),
                      child: const Text(
                        'X√≥a key c≈©',
                        style: TextStyle(fontSize: 14),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    flex: 2,
                    child: TextButton(
                      onPressed: _isLoading ? null : () => _saveApiKey(skipValidation: true),
                      style: TextButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: const Text(
                        'L∆∞u kh√¥ng ki·ªÉm tra',
                        style: TextStyle(fontSize: 14),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              SizedBox(
                width: double.infinity,
                child: TextButton(
                  onPressed: _isLoading ? null : () => Navigator.of(context).pop(false),
                  style: TextButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 12),
                  ),
                  child: const Text(
                    'B·ªè qua (s·ª≠ d·ª•ng sau)',
                    style: TextStyle(fontSize: 14, color: Colors.grey),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
