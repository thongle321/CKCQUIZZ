import 'dart:convert';
import 'dart:io';

/// Test script ƒë·ªÉ ki·ªÉm tra API th√¥ng b√°o cho sinh vi√™n
void main() async {
  print('üß™ Testing Student Notification API...\n');
  
  // Test data
  const baseUrl = 'https://ckcquizz.dnssking.com:7254';
  const testUserId = 'test-student-id'; // Thay b·∫±ng user ID th·ª±c t·∫ø
  
  // Test 1: API c≈© (d√†nh cho gi·∫£ng vi√™n) - s·∫Ω tr·∫£ v·ªÅ empty
  await testOldAPI(baseUrl);
  
  // Test 2: API m·ªõi (d√†nh cho sinh vi√™n) - s·∫Ω tr·∫£ v·ªÅ data
  await testNewAPI(baseUrl, testUserId);
}

/// Test API c≈© /api/ThongBao/me (d√†nh cho gi·∫£ng vi√™n)
Future<void> testOldAPI(String baseUrl) async {
  print('üìã Test 1: API c≈© /api/ThongBao/me (d√†nh cho gi·∫£ng vi√™n)');
  
  try {
    final client = HttpClient();
    client.badCertificateCallback = (cert, host, port) => true; // Ignore SSL for testing
    
    final request = await client.getUrl(Uri.parse('$baseUrl/api/ThongBao/me?page=1&pageSize=10'));
    request.headers.set('Content-Type', 'application/json');
    // Note: Trong th·ª±c t·∫ø c·∫ßn th√™m Authorization header v·ªõi JWT token
    
    final response = await request.close();
    final responseBody = await response.transform(utf8.decoder).join();
    
    print('   Status Code: ${response.statusCode}');
    print('   Response: $responseBody');
    
    if (response.statusCode == 200) {
      final data = jsonDecode(responseBody);
      final totalCount = data['totalCount'] ?? 0;
      final items = data['items'] ?? [];
      print('   ‚úÖ API ho·∫°t ƒë·ªông - Total: $totalCount, Items: ${items.length}');
      if (totalCount == 0) {
        print('   ‚ö†Ô∏è  Kh√¥ng c√≥ data (ƒë√∫ng nh∆∞ mong ƒë·ª£i cho sinh vi√™n)');
      }
    } else {
      print('   ‚ùå API l·ªói');
    }
    
    client.close();
  } catch (e) {
    print('   ‚ùå Error: $e');
  }
  
  print('');
}

/// Test API m·ªõi /api/ThongBao/notifications/{userId} (d√†nh cho sinh vi√™n)
Future<void> testNewAPI(String baseUrl, String userId) async {
  print('üìã Test 2: API m·ªõi /api/ThongBao/notifications/$userId (d√†nh cho sinh vi√™n)');
  
  try {
    final client = HttpClient();
    client.badCertificateCallback = (cert, host, port) => true; // Ignore SSL for testing
    
    final request = await client.getUrl(Uri.parse('$baseUrl/api/ThongBao/notifications/$userId'));
    request.headers.set('Content-Type', 'application/json');
    // Note: Trong th·ª±c t·∫ø c·∫ßn th√™m Authorization header v·ªõi JWT token
    
    final response = await request.close();
    final responseBody = await response.transform(utf8.decoder).join();
    
    print('   Status Code: ${response.statusCode}');
    print('   Response: $responseBody');
    
    if (response.statusCode == 200) {
      final data = jsonDecode(responseBody);
      if (data is List) {
        print('   ‚úÖ API ho·∫°t ƒë·ªông - S·ªë th√¥ng b√°o: ${data.length}');
        if (data.isNotEmpty) {
          print('   üìÑ Sample notification:');
          final sample = data.first;
          print('      - ID: ${sample['matb']}');
          print('      - N·ªôi dung: ${sample['noidung']}');
          print('      - Ng∆∞·ªùi t·∫°o: ${sample['hoten']}');
          print('      - M√¥n h·ªçc: ${sample['tenmonhoc']}');
          print('      - Th·ªùi gian: ${sample['thoigiantao']}');
        } else {
          print('   ‚ö†Ô∏è  Kh√¥ng c√≥ th√¥ng b√°o n√†o cho user n√†y');
        }
      } else {
        print('   ‚ùå Response format kh√¥ng ƒë√∫ng (kh√¥ng ph·∫£i List)');
      }
    } else {
      print('   ‚ùå API l·ªói');
    }
    
    client.close();
  } catch (e) {
    print('   ‚ùå Error: $e');
  }
  
  print('');
}
